<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration"/>
  </importInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eModel&quot;, eModel);&#xA;match.registerObject(&quot;compilationUnit&quot;, compilationUnit);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;compilationUnit&quot;,compilationUnit);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;compilationUnit&quot;, compilationUnit);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;compilationUnit&quot;).eClass()).equals(&quot;java.CompilationUnit.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mModel&quot;, mModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModel.name&quot;, true, csp);&#xD;&#xA;var_mModel_name.setValue(mModel.getName());&#xD;&#xA;var_mModel_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tPG_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPG.tName&quot;, csp);&#xD;&#xA;var_tPG_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mModel_name,var_tPG_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;tPG&quot;, tPG);&#xA;ruleresult.registerObject(&quot;mModelToTPG&quot;, mModelToTPG);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mModel&quot;).eClass()).equals(&quot;modisco.MGravityModel.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tPG&quot;, tPG);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tPG_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPG.tName&quot;, true, csp);&#xD;&#xA;var_tPG_tName.setValue(tPG.getTName());&#xD;&#xA;var_tPG_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModel.name&quot;, csp);&#xD;&#xA;var_mModel_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mModel_name,var_tPG_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPG&quot;,tPG);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;tPG&quot;, tPG);&#xA;ruleresult.registerObject(&quot;mModelToTPG&quot;, mModelToTPG);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPG&quot;).eClass()).equals(&quot;basic.TypeGraph.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mModel&quot;, mModel);&#xA;match.registerObject(&quot;mPackage&quot;, mPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage.name&quot;, true, csp);&#xD;&#xA;var_mPackage_name.setValue(mPackage.getName());&#xD;&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPackage.tName&quot;, csp);&#xD;&#xA;var_tPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mPackage_name,var_tPackage_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;mModelToTypeGraph&quot;, mModelToTypeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mPackage&quot;).eClass()).equals(&quot;java.Package.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPackage.tName&quot;, true, csp);&#xD;&#xA;var_tPackage_tName.setValue(tPackage.getTName());&#xD;&#xA;var_tPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage.name&quot;, csp);&#xD;&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mPackage_name,var_tPackage_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;mModelToTypeGraph&quot;, mModelToTypeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPackage&quot;).eClass()).equals(&quot;basic.TPackage.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mPackage&quot;, mPackage);&#xA;match.registerObject(&quot;mParentPackage&quot;, mParentPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage.name&quot;, true, csp);&#xD;&#xA;var_mPackage_name.setValue(mPackage.getName());&#xD;&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tSub_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSub.tName&quot;, csp);&#xD;&#xA;var_tSub_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mPackage_name,var_tSub_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParent&quot;,tParent);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mParentPackage&quot;,mParentPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mParentPackageToTParent&quot;,mParentPackageToTParent);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;tParent&quot;, tParent);&#xA;ruleresult.registerObject(&quot;tSub&quot;, tSub);&#xA;ruleresult.registerObject(&quot;mParentPackage&quot;, mParentPackage);&#xA;ruleresult.registerObject(&quot;mParentPackageToTParent&quot;, mParentPackageToTParent);&#xA;ruleresult.registerObject(&quot;mPackageToTSub&quot;, mPackageToTSub);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mPackage&quot;).eClass()).equals(&quot;java.Package.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tParent&quot;, tParent);&#xA;match.registerObject(&quot;tSub&quot;, tSub);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tSub_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSub.tName&quot;, true, csp);&#xD;&#xA;var_tSub_tName.setValue(tSub.getTName());&#xD;&#xA;var_tSub_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage.name&quot;, csp);&#xD;&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mPackage_name,var_tSub_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParent&quot;,tParent);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSub&quot;,tSub);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mParentPackage&quot;,mParentPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mParentPackageToTParent&quot;,mParentPackageToTParent);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;tParent&quot;, tParent);&#xA;ruleresult.registerObject(&quot;tSub&quot;, tSub);&#xA;ruleresult.registerObject(&quot;mParentPackage&quot;, mParentPackage);&#xA;ruleresult.registerObject(&quot;mParentPackageToTParent&quot;, mParentPackageToTParent);&#xA;ruleresult.registerObject(&quot;mPackageToTSub&quot;, mPackageToTSub);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tSub&quot;).eClass()).equals(&quot;basic.TPackage.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;match.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, csp);&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, csp);&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, csp);&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal0,var_tNestedPackage_tName);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eNestedType&quot;,eNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;tNestedPackage&quot;, tNestedPackage);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eNestedType&quot;).eClass()).equals(&quot;java.InterfaceDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(tNestedType.getID());&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(tNestedPackage.getID());&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tNestedPackage&quot;, tNestedPackage);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;match.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;match.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(tNestedPackage.getTName());&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal0,var_tNestedPackage_tName);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedPackage&quot;,tNestedPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;tNestedPackage&quot;, tNestedPackage);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedPackage&quot;).eClass()).equals(&quot;basic.TPackage.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedType&quot;).eClass()).equals(&quot;basic.TInterface.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eModel&quot;, eModel);&#xA;match.registerObject(&quot;eParameterizedType&quot;, eParameterizedType);&#xA;match.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;match.registerObject(&quot;eType&quot;, eType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eParameterizedType&quot;,eParameterizedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eType&quot;,eType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeToTAbstractType&quot;,eTypeToTAbstractType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eModelToPg&quot;, eModelToPg);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;ruleresult.registerObject(&quot;eParameterizedType&quot;, eParameterizedType);&#xA;ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;eType&quot;, eType);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;ruleresult.registerObject(&quot;eTypeToTAbstractType&quot;, eTypeToTAbstractType);&#xA;ruleresult.registerObject(&quot;eParameterizedTypeToTAbstractType&quot;, eParameterizedTypeToTAbstractType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eParameterizedType&quot;).eClass()).equals(&quot;java.ParameterizedType.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;match.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, csp);&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, csp);&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, csp);&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal0,var_tNestedPackage_tName);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eNestedType&quot;,eNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;tNestedPackage&quot;, tNestedPackage);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eNestedType&quot;).eClass()).equals(&quot;java.ClassDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(tNestedType.getID());&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(tNestedPackage.getID());&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tNestedPackage&quot;, tNestedPackage);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;match.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;match.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(tNestedPackage.getTName());&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal0,var_tNestedPackage_tName);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedPackage&quot;,tNestedPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;tNestedPackage&quot;, tNestedPackage);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedPackage&quot;).eClass()).equals(&quot;basic.TPackage.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedType&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mSignature&quot;, mSignature);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tSignature&quot;, tSignature);&#xA;match.registerObject(&quot;tType&quot;, tType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mPackage&quot;, mPackage);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(mType.getName());&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(mType.isProxy());&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, csp);&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mType&quot;).eClass()).equals(&quot;java.InterfaceDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(tType.getID());&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(tType.getTName());&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(tType.isTLib());&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tType&quot;).eClass()).equals(&quot;basic.TInterface.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mFieldName&quot;, mFieldName);&#xA;match.registerObject(&quot;mSignature&quot;, mSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tSignature_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.ID&quot;, csp);&#xD;&#xA;var_tSignature_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tSignature_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mFieldName&quot;,mFieldName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eFieldDeclarationToTField&quot;,eFieldDeclarationToTField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mFieldSignatureToTFieldSignature&quot;, mFieldSignatureToTFieldSignature);&#xA;ruleresult.registerObject(&quot;mFieldName&quot;, mFieldName);&#xA;ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;eFieldDeclarationToTField&quot;, eFieldDeclarationToTField);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mSignature&quot;).eClass()).equals(&quot;modisco.MFieldSignature.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tSignature_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.ID&quot;, true, csp);&#xD;&#xA;var_tSignature_ID.setValue(tSignature.getID());&#xD;&#xA;var_tSignature_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tSignature_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tField&quot;, tField);&#xA;match.registerObject(&quot;tSignature&quot;, tSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mFieldName&quot;,mFieldName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eFieldDeclarationToTField&quot;,eFieldDeclarationToTField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mFieldSignatureToTFieldSignature&quot;, mFieldSignatureToTFieldSignature);&#xA;ruleresult.registerObject(&quot;mFieldName&quot;, mFieldName);&#xA;ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;eFieldDeclarationToTField&quot;, eFieldDeclarationToTField);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tSignature&quot;).eClass()).equals(&quot;basic.TFieldSignature.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mMethodSignature&quot;, mMethodSignature);&#xA;match.registerObject(&quot;mEntry&quot;, mEntry);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignatureToTParameterList&quot;,mMethodSignatureToTParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTAbstractType&quot;,mTypeToTAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignature&quot;,mMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mMethodSignatureToTParameterList&quot;, mMethodSignatureToTParameterList);&#xA;ruleresult.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;ruleresult.registerObject(&quot;mTypeToTAbstractType&quot;, mTypeToTAbstractType);&#xA;ruleresult.registerObject(&quot;mMethodSignature&quot;, mMethodSignature);&#xA;ruleresult.registerObject(&quot;mEntry&quot;, mEntry);&#xA;ruleresult.registerObject(&quot;mEntryToTParameter&quot;, mEntryToTParameter);&#xA;ruleresult.registerObject(&quot;tParameter&quot;, tParameter);&#xA;ruleresult.registerObject(&quot;tParameterList&quot;, tParameterList);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mEntry&quot;).eClass()).equals(&quot;modisco.MEntry.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;match.registerObject(&quot;tParameter&quot;, tParameter);&#xA;match.registerObject(&quot;tParameterList&quot;, tParameterList);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignatureToTParameterList&quot;,mMethodSignatureToTParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTAbstractType&quot;,mTypeToTAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignature&quot;,mMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mMethodSignatureToTParameterList&quot;, mMethodSignatureToTParameterList);&#xA;ruleresult.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;ruleresult.registerObject(&quot;mTypeToTAbstractType&quot;, mTypeToTAbstractType);&#xA;ruleresult.registerObject(&quot;mMethodSignature&quot;, mMethodSignature);&#xA;ruleresult.registerObject(&quot;mEntry&quot;, mEntry);&#xA;ruleresult.registerObject(&quot;mEntryToTParameter&quot;, mEntryToTParameter);&#xA;ruleresult.registerObject(&quot;tParameter&quot;, tParameter);&#xA;ruleresult.registerObject(&quot;tParameterList&quot;, tParameterList);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tParameter&quot;).eClass()).equals(&quot;basic.TParameter.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mPackage&quot;, mPackage);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(mType.getName());&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(mType.isProxy());&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, csp);&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mType&quot;).eClass()).equals(&quot;java.AnnotationTypeDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(tType.getID());&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(tType.getTName());&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(tType.isTLib());&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tType&quot;).eClass()).equals(&quot;basic.TAnnotationType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mAccess&quot;, mAccess);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mAccess&quot;,mAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;mAccessToTAccess&quot;, mAccessToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAccess&quot;).eClass()).equals(&quot;java.SingleVariableAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;match.registerObject(&quot;tMember&quot;, tMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;mAccessToTAccess&quot;, mAccessToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAccess&quot;).eClass()).equals(&quot;basic.TAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;match.registerObject(&quot;eInterfaceDeclaration&quot;, eInterfaceDeclaration);&#xA;match.registerObject(&quot;eSuperInterface&quot;, eSuperInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tInterface&quot;,tInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eInterfaceDeclaration&quot;,eInterfaceDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eInterfaceDeclarationToTInterface&quot;,eInterfaceDeclarationToTInterface);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;, eSuperInterfaceToTSuperInterface);&#xA;ruleresult.registerObject(&quot;tInterface&quot;, tInterface);&#xA;ruleresult.registerObject(&quot;tSuperInterface&quot;, tSuperInterface);&#xA;ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;eInterfaceDeclaration&quot;, eInterfaceDeclaration);&#xA;ruleresult.registerObject(&quot;eSuperInterface&quot;, eSuperInterface);&#xA;ruleresult.registerObject(&quot;eInterfaceDeclarationToTInterface&quot;, eInterfaceDeclarationToTInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tInterface&quot;, tInterface);&#xA;match.registerObject(&quot;tSuperInterface&quot;, tSuperInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tInterface&quot;,tInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eInterfaceDeclaration&quot;,eInterfaceDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eInterfaceDeclarationToTInterface&quot;,eInterfaceDeclarationToTInterface);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;, eSuperInterfaceToTSuperInterface);&#xA;ruleresult.registerObject(&quot;tInterface&quot;, tInterface);&#xA;ruleresult.registerObject(&quot;tSuperInterface&quot;, tSuperInterface);&#xA;ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;eInterfaceDeclaration&quot;, eInterfaceDeclaration);&#xA;ruleresult.registerObject(&quot;eSuperInterface&quot;, eSuperInterface);&#xA;ruleresult.registerObject(&quot;eInterfaceDeclarationToTInterface&quot;, eInterfaceDeclarationToTInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;match.registerObject(&quot;eClassDeclaration&quot;, eClassDeclaration);&#xA;match.registerObject(&quot;eExtendedClass&quot;, eExtendedClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eExtendedClass&quot;,eExtendedClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tExtendedClass&quot;,tExtendedClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eExtendedClassToTExtendedClass&quot;,eExtendedClassToTExtendedClass);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;eClassDeclaration&quot;, eClassDeclaration);&#xA;ruleresult.registerObject(&quot;eExtendedClass&quot;, eExtendedClass);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;tExtendedClass&quot;, tExtendedClass);&#xA;ruleresult.registerObject(&quot;eClassDeclarationToTClass&quot;, eClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eExtendedClassToTExtendedClass&quot;, eExtendedClassToTExtendedClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tClass&quot;, tClass);&#xA;match.registerObject(&quot;tExtendedClass&quot;, tExtendedClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eExtendedClass&quot;,eExtendedClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tExtendedClass&quot;,tExtendedClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eExtendedClassToTExtendedClass&quot;,eExtendedClassToTExtendedClass);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;eClassDeclaration&quot;, eClassDeclaration);&#xA;ruleresult.registerObject(&quot;eExtendedClass&quot;, eExtendedClass);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;tExtendedClass&quot;, tExtendedClass);&#xA;ruleresult.registerObject(&quot;eClassDeclarationToTClass&quot;, eClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eExtendedClassToTExtendedClass&quot;, eExtendedClassToTExtendedClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;match.registerObject(&quot;eSuperInterface&quot;, eSuperInterface);&#xA;match.registerObject(&quot;eClassDeclaration&quot;, eClassDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eClassDeclarationToTClass&quot;, eClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;, eSuperInterfaceToTSuperInterface);&#xA;ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;eSuperInterface&quot;, eSuperInterface);&#xA;ruleresult.registerObject(&quot;eClassDeclaration&quot;, eClassDeclaration);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;tSuperInterface&quot;, tSuperInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tClass&quot;, tClass);&#xA;match.registerObject(&quot;tSuperInterface&quot;, tSuperInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eClassDeclarationToTClass&quot;, eClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;, eSuperInterfaceToTSuperInterface);&#xA;ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;eSuperInterface&quot;, eSuperInterface);&#xA;ruleresult.registerObject(&quot;eClassDeclaration&quot;, eClassDeclaration);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;tSuperInterface&quot;, tSuperInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eInnerClass&quot;, eInnerClass);&#xA;match.registerObject(&quot;eCodeBlock&quot;, eCodeBlock);&#xA;match.registerObject(&quot;typeDeclarationStatement&quot;, typeDeclarationStatement);&#xA;match.registerObject(&quot;eMethodDeclaration&quot;, eMethodDeclaration);&#xA;match.registerObject(&quot;eOuterClass&quot;, eOuterClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$1&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eInnerClass.name&quot;, true, csp);&#xD;&#xA;var_eInnerClass_name.setValue(eInnerClass.getName());&#xD;&#xA;var_eInnerClass_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xD;&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xD;&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tInnerClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.ID&quot;, csp);&#xD;&#xA;var_tInnerClass_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tInnerPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.ID&quot;, csp);&#xD;&#xA;var_tInnerPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, csp);&#xD;&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tInnerPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.tName&quot;, csp);&#xD;&#xA;var_tInnerPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tInnerClass_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tInnerPackage_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_tOuterClass_tName,literal0,var_tInnerPackage_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eInnerClass&quot;,eInnerClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eCodeBlock&quot;,eCodeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeDeclarationStatement&quot;,typeDeclarationStatement);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eMethodDeclaration&quot;,eMethodDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eInnerClassToTInnerClass&quot;, eInnerClassToTInnerClass);&#xA;ruleresult.registerObject(&quot;eOuterClassToTOuterClass&quot;, eOuterClassToTOuterClass);&#xA;ruleresult.registerObject(&quot;tInnerClass&quot;, tInnerClass);&#xA;ruleresult.registerObject(&quot;tInnerPackage&quot;, tInnerPackage);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tOuterClass&quot;, tOuterClass);&#xA;ruleresult.registerObject(&quot;eInnerClass&quot;, eInnerClass);&#xA;ruleresult.registerObject(&quot;eCodeBlock&quot;, eCodeBlock);&#xA;ruleresult.registerObject(&quot;typeDeclarationStatement&quot;, typeDeclarationStatement);&#xA;ruleresult.registerObject(&quot;eMethodDeclaration&quot;, eMethodDeclaration);&#xA;ruleresult.registerObject(&quot;eOuterClass&quot;, eOuterClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eInnerClass&quot;).eClass()).equals(&quot;java.ClassDeclaration.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;typeDeclarationStatement&quot;).eClass()).equals(&quot;java.TypeDeclarationStatement.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$1&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tInnerClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.ID&quot;, true, csp);&#xD;&#xA;var_tInnerClass_ID.setValue(tInnerClass.getID());&#xD;&#xA;var_tInnerClass_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tInnerPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.ID&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_ID.setValue(tInnerPackage.getID());&#xD;&#xA;var_tInnerPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xD;&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xD;&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tInnerPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.tName&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_tName.setValue(tInnerPackage.getTName());&#xD;&#xA;var_tInnerPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tInnerClass_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tInnerPackage_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_tOuterClass_tName,literal0,var_tInnerPackage_tName);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tInnerClass&quot;, tInnerClass);&#xA;match.registerObject(&quot;tInnerPackage&quot;, tInnerPackage);&#xA;match.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tOuterClass&quot;, tOuterClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, true, csp);&#xD;&#xA;var_tInnerClass_tName.setValue(tInnerClass.getTName());&#xD;&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_eInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eInnerClass.name&quot;, csp);&#xD;&#xA;var_eInnerClass_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tInnerClass&quot;,tInnerClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tInnerPackage&quot;,tInnerPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eCodeBlock&quot;,eCodeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eMethodDeclaration&quot;,eMethodDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eInnerClassToTInnerClass&quot;, eInnerClassToTInnerClass);&#xA;ruleresult.registerObject(&quot;eOuterClassToTOuterClass&quot;, eOuterClassToTOuterClass);&#xA;ruleresult.registerObject(&quot;tInnerClass&quot;, tInnerClass);&#xA;ruleresult.registerObject(&quot;tInnerPackage&quot;, tInnerPackage);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tOuterClass&quot;, tOuterClass);&#xA;ruleresult.registerObject(&quot;eInnerClass&quot;, eInnerClass);&#xA;ruleresult.registerObject(&quot;eCodeBlock&quot;, eCodeBlock);&#xA;ruleresult.registerObject(&quot;typeDeclarationStatement&quot;, typeDeclarationStatement);&#xA;ruleresult.registerObject(&quot;eMethodDeclaration&quot;, eMethodDeclaration);&#xA;ruleresult.registerObject(&quot;eOuterClass&quot;, eOuterClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tInnerClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tInnerPackage&quot;).eClass()).equals(&quot;basic.TPackage.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eOuterClass&quot;, eOuterClass);&#xA;match.registerObject(&quot;eConstructorDeclaration&quot;, eConstructorDeclaration);&#xA;match.registerObject(&quot;typeDeclarationStatement&quot;, typeDeclarationStatement);&#xA;match.registerObject(&quot;eCodeBlock&quot;, eCodeBlock);&#xA;match.registerObject(&quot;eInnerClass&quot;, eInnerClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$1&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eInnerClass.name&quot;, true, csp);&#xD;&#xA;var_eInnerClass_name.setValue(eInnerClass.getName());&#xD;&#xA;var_eInnerClass_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xD;&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xD;&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tInnerClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.ID&quot;, csp);&#xD;&#xA;var_tInnerClass_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tInnerPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.ID&quot;, csp);&#xD;&#xA;var_tInnerPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, csp);&#xD;&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tInnerPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.tName&quot;, csp);&#xD;&#xA;var_tInnerPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tInnerClass_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tInnerPackage_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_tOuterClass_tName,literal0,var_tInnerPackage_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eConstructorDeclaration&quot;,eConstructorDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeDeclarationStatement&quot;,typeDeclarationStatement);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eCodeBlock&quot;,eCodeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eInnerClass&quot;,eInnerClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eInnerClassToTInnerClass&quot;, eInnerClassToTInnerClass);&#xA;ruleresult.registerObject(&quot;eOuterClassToTOuterClass&quot;, eOuterClassToTOuterClass);&#xA;ruleresult.registerObject(&quot;eOuterClass&quot;, eOuterClass);&#xA;ruleresult.registerObject(&quot;eConstructorDeclaration&quot;, eConstructorDeclaration);&#xA;ruleresult.registerObject(&quot;typeDeclarationStatement&quot;, typeDeclarationStatement);&#xA;ruleresult.registerObject(&quot;eCodeBlock&quot;, eCodeBlock);&#xA;ruleresult.registerObject(&quot;eInnerClass&quot;, eInnerClass);&#xA;ruleresult.registerObject(&quot;tOuterClass&quot;, tOuterClass);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;ruleresult.registerObject(&quot;tInnerPackage&quot;, tInnerPackage);&#xA;ruleresult.registerObject(&quot;tInnerClass&quot;, tInnerClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;typeDeclarationStatement&quot;).eClass()).equals(&quot;java.TypeDeclarationStatement.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eInnerClass&quot;).eClass()).equals(&quot;java.ClassDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$1&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tInnerClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.ID&quot;, true, csp);&#xD;&#xA;var_tInnerClass_ID.setValue(tInnerClass.getID());&#xD;&#xA;var_tInnerClass_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tInnerPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.ID&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_ID.setValue(tInnerPackage.getID());&#xD;&#xA;var_tInnerPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xD;&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xD;&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tInnerPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.tName&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_tName.setValue(tInnerPackage.getTName());&#xD;&#xA;var_tInnerPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tInnerClass_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tInnerPackage_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_tOuterClass_tName,literal0,var_tInnerPackage_tName);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tOuterClass&quot;, tOuterClass);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;match.registerObject(&quot;tInnerPackage&quot;, tInnerPackage);&#xA;match.registerObject(&quot;tInnerClass&quot;, tInnerClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, true, csp);&#xD;&#xA;var_tInnerClass_tName.setValue(tInnerClass.getTName());&#xD;&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_eInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eInnerClass.name&quot;, csp);&#xD;&#xA;var_eInnerClass_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eConstructorDeclaration&quot;,eConstructorDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eCodeBlock&quot;,eCodeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tInnerPackage&quot;,tInnerPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tInnerClass&quot;,tInnerClass);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eInnerClassToTInnerClass&quot;, eInnerClassToTInnerClass);&#xA;ruleresult.registerObject(&quot;eOuterClassToTOuterClass&quot;, eOuterClassToTOuterClass);&#xA;ruleresult.registerObject(&quot;eOuterClass&quot;, eOuterClass);&#xA;ruleresult.registerObject(&quot;eConstructorDeclaration&quot;, eConstructorDeclaration);&#xA;ruleresult.registerObject(&quot;typeDeclarationStatement&quot;, typeDeclarationStatement);&#xA;ruleresult.registerObject(&quot;eCodeBlock&quot;, eCodeBlock);&#xA;ruleresult.registerObject(&quot;eInnerClass&quot;, eInnerClass);&#xA;ruleresult.registerObject(&quot;tOuterClass&quot;, tOuterClass);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;ruleresult.registerObject(&quot;tInnerPackage&quot;, tInnerPackage);&#xA;ruleresult.registerObject(&quot;tInnerClass&quot;, tInnerClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tInnerPackage&quot;).eClass()).equals(&quot;basic.TPackage.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tInnerClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mMethod&quot;, mMethod);&#xA;match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethod&quot;,tMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethod&quot;,mMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationToTAccess&quot;,invocationToTAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTDefinition&quot;,mDefinitionToTDefinition);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;tMethod&quot;, tMethod);&#xA;ruleresult.registerObject(&quot;mMethod&quot;, mMethod);&#xA;ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMethodToTMethod&quot;, mMethodToTMethod);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;mDefinitionToTDefinition&quot;, mDefinitionToTDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;match.registerObject(&quot;tMethod&quot;, tMethod);&#xA;match.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethod&quot;,tMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethod&quot;,mMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationToTAccess&quot;,invocationToTAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTDefinition&quot;,mDefinitionToTDefinition);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;tMethod&quot;, tMethod);&#xA;ruleresult.registerObject(&quot;mMethod&quot;, mMethod);&#xA;ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMethodToTMethod&quot;, mMethodToTMethod);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;mDefinitionToTDefinition&quot;, mDefinitionToTDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mFieldName&quot;, mFieldName);&#xA;match.registerObject(&quot;model&quot;, model);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mFieldName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mFieldName.mName&quot;, true, csp);&#xD;&#xA;var_mFieldName_mName.setValue(mFieldName.getMName());&#xD;&#xA;var_mFieldName_mName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tField_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField.tName&quot;, csp);&#xD;&#xA;var_tField_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tField_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField.ID&quot;, csp);&#xD;&#xA;var_tField_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mFieldName_mName,var_tField_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tField_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mFieldName&quot;,mFieldName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;modelToTypeGraph&quot;,modelToTypeGraph);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mFieldName&quot;, mFieldName);&#xA;ruleresult.registerObject(&quot;eFieldDeclarationToTField&quot;, eFieldDeclarationToTField);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;modelToTypeGraph&quot;, modelToTypeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mFieldName&quot;).eClass()).equals(&quot;modisco.MFieldName.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tField_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField.ID&quot;, true, csp);&#xD;&#xA;var_tField_ID.setValue(tField.getID());&#xD;&#xA;var_tField_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tField_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tField&quot;, tField);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tField_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField.tName&quot;, true, csp);&#xD;&#xA;var_tField_tName.setValue(tField.getTName());&#xD;&#xA;var_tField_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mFieldName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mFieldName.mName&quot;, csp);&#xD;&#xA;var_mFieldName_mName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mFieldName_mName,var_tField_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;modelToTypeGraph&quot;,modelToTypeGraph);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mFieldName&quot;, mFieldName);&#xA;ruleresult.registerObject(&quot;eFieldDeclarationToTField&quot;, eFieldDeclarationToTField);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;modelToTypeGraph&quot;, modelToTypeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tField&quot;).eClass()).equals(&quot;basic.TField.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mSignature&quot;, mSignature);&#xA;match.registerObject(&quot;eFieldDeclaration&quot;, eFieldDeclaration);&#xA;match.registerObject(&quot;mName&quot;, mName);&#xA;match.registerObject(&quot;varDeclFragment&quot;, varDeclFragment);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tFieldDefinition_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldDefinition.ID&quot;, csp);&#xD;&#xA;var_tFieldDefinition_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tFieldDefinition_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eFieldDeclaration&quot;,eFieldDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTFieldSignature&quot;,mSignatureToTFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mName&quot;,mName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tFieldSignature&quot;,tFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mNameToTField&quot;,mNameToTField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varDeclFragment&quot;,varDeclFragment);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eFieldDeclarationToTFieldDefinition&quot;, eFieldDeclarationToTFieldDefinition);&#xA;ruleresult.registerObject(&quot;eFieldDeclarationToTFieldSignature&quot;, eFieldDeclarationToTFieldSignature);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;eFieldDeclaration&quot;, eFieldDeclaration);&#xA;ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;eFieldDeclarationToTField&quot;, eFieldDeclarationToTField);&#xA;ruleresult.registerObject(&quot;mSignatureToTFieldSignature&quot;, mSignatureToTFieldSignature);&#xA;ruleresult.registerObject(&quot;mName&quot;, mName);&#xA;ruleresult.registerObject(&quot;tFieldDefinition&quot;, tFieldDefinition);&#xA;ruleresult.registerObject(&quot;tFieldSignature&quot;, tFieldSignature);&#xA;ruleresult.registerObject(&quot;mNameToTField&quot;, mNameToTField);&#xA;ruleresult.registerObject(&quot;varDeclFragment&quot;, varDeclFragment);&#xA;ruleresult.registerObject(&quot;varDeclFragmentToTFieldDefinition&quot;, varDeclFragmentToTFieldDefinition);&#xA;ruleresult.registerObject(&quot;mDefinitionToTSignature&quot;, mDefinitionToTSignature);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eFieldDeclaration&quot;).eClass()).equals(&quot;modisco.MFieldDefinition.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;varDeclFragment&quot;).eClass()).equals(&quot;java.VariableDeclarationFragment.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tFieldDefinition_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldDefinition.ID&quot;, true, csp);&#xD;&#xA;var_tFieldDefinition_ID.setValue(tFieldDefinition.getID());&#xD;&#xA;var_tFieldDefinition_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tFieldDefinition_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tField&quot;, tField);&#xA;match.registerObject(&quot;tFieldDefinition&quot;, tFieldDefinition);&#xA;match.registerObject(&quot;tFieldSignature&quot;, tFieldSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTFieldSignature&quot;,mSignatureToTFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mName&quot;,mName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tFieldDefinition&quot;,tFieldDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tFieldSignature&quot;,tFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mNameToTField&quot;,mNameToTField);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eFieldDeclarationToTFieldDefinition&quot;, eFieldDeclarationToTFieldDefinition);&#xA;ruleresult.registerObject(&quot;eFieldDeclarationToTFieldSignature&quot;, eFieldDeclarationToTFieldSignature);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;eFieldDeclaration&quot;, eFieldDeclaration);&#xA;ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;eFieldDeclarationToTField&quot;, eFieldDeclarationToTField);&#xA;ruleresult.registerObject(&quot;mSignatureToTFieldSignature&quot;, mSignatureToTFieldSignature);&#xA;ruleresult.registerObject(&quot;mName&quot;, mName);&#xA;ruleresult.registerObject(&quot;tFieldDefinition&quot;, tFieldDefinition);&#xA;ruleresult.registerObject(&quot;tFieldSignature&quot;, tFieldSignature);&#xA;ruleresult.registerObject(&quot;mNameToTField&quot;, mNameToTField);&#xA;ruleresult.registerObject(&quot;varDeclFragment&quot;, varDeclFragment);&#xA;ruleresult.registerObject(&quot;varDeclFragmentToTFieldDefinition&quot;, varDeclFragmentToTFieldDefinition);&#xA;ruleresult.registerObject(&quot;mDefinitionToTSignature&quot;, mDefinitionToTSignature);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tFieldDefinition&quot;).eClass()).equals(&quot;basic.TFieldDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTDefinition&quot;,mDefinitionToTDefinition);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;mDefinitionToTDefinition&quot;, mDefinitionToTDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTDefinition&quot;,mDefinitionToTDefinition);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;mDefinitionToTDefinition&quot;, mDefinitionToTDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mPackage&quot;, mPackage);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(mType.getName());&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(mType.isProxy());&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, csp);&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mType&quot;).eClass()).equals(&quot;java.ClassDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(tType.getID());&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(tType.getTName());&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(tType.isTLib());&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tType&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;mSignature&quot;, mSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tFieldSignature&quot;,tFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiv&quot;,tPrimitiv);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveTypeToTPrimitiv&quot;,ePrimitiveTypeToTPrimitiv);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTFieldSignature&quot;,mSignatureToTFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tFieldSignature&quot;, tFieldSignature);&#xA;ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;tPrimitiv&quot;, tPrimitiv);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiv&quot;, ePrimitiveTypeToTPrimitiv);&#xA;ruleresult.registerObject(&quot;mSignatureToTFieldSignature&quot;, mSignatureToTFieldSignature);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tFieldSignature&quot;, tFieldSignature);&#xA;match.registerObject(&quot;tPrimitiv&quot;, tPrimitiv);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tFieldSignature&quot;,tFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiv&quot;,tPrimitiv);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveTypeToTPrimitiv&quot;,ePrimitiveTypeToTPrimitiv);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTFieldSignature&quot;,mSignatureToTFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tFieldSignature&quot;, tFieldSignature);&#xA;ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;tPrimitiv&quot;, tPrimitiv);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiv&quot;, ePrimitiveTypeToTPrimitiv);&#xA;ruleresult.registerObject(&quot;mSignatureToTFieldSignature&quot;, mSignatureToTFieldSignature);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;match.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, csp);&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, csp);&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, csp);&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal0,var_tNestedPackage_tName);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eNestedType&quot;,eNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;tNestedPackage&quot;, tNestedPackage);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eNestedType&quot;).eClass()).equals(&quot;java.AnnotationTypeDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(tNestedType.getID());&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(tNestedPackage.getID());&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tNestedPackage&quot;, tNestedPackage);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;match.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;match.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(tNestedPackage.getTName());&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal0,var_tNestedPackage_tName);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedPackage&quot;,tNestedPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;tNestedPackage&quot;, tNestedPackage);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedPackage&quot;).eClass()).equals(&quot;basic.TPackage.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedType&quot;).eClass()).equals(&quot;basic.TAnnotationType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;access&quot;, access);&#xA;match.registerObject(&quot;mPackage&quot;, mPackage);&#xA;match.registerObject(&quot;type&quot;, type);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;match.registerObject(&quot;member&quot;, member);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(mType.getName());&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(mType.isProxy());&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, csp);&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;access&quot;,access);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAType&quot;,tAType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;member&quot;,member);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeToTAType&quot;,typeToTAType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;access&quot;, access);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;tAType&quot;, tAType);&#xA;ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;member&quot;, member);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;typeToTAType&quot;, typeToTAType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;access&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mType&quot;).eClass()).equals(&quot;java.AnnotationTypeDeclaration.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;member&quot;).eClass()).equals(&quot;java.AnnotationTypeMemberDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(tType.getID());&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tAType&quot;, tAType);&#xA;match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(tType.getTName());&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(tType.isTLib());&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAType&quot;,tAType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeToTAType&quot;,typeToTAType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;access&quot;, access);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;tAType&quot;, tAType);&#xA;ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;member&quot;, member);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;typeToTAType&quot;, typeToTAType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tType&quot;).eClass()).equals(&quot;basic.TAnnotationType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeInt.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eModel&quot;, eModel);&#xA;match.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.ID&quot;, csp);&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tClass_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;ruleresult.registerObject(&quot;eModelToPg&quot;, eModelToPg);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eAnonymousClassDeclaration&quot;).eClass()).equals(&quot;java.AnonymousClassDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.ID&quot;, true, csp);&#xD;&#xA;var_tClass_ID.setValue(tClass.getID());&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tClass_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tClass&quot;, tClass);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;ruleresult.registerObject(&quot;eModelToPg&quot;, eModelToPg);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mmethodSignature&quot;, mmethodSignature);&#xA;match.registerObject(&quot;mEntry&quot;, mEntry);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mmethodSignature&quot;,mmethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;,eSingleVariableDeclarationToTParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;,mmethodSignatureToTMethodSignature);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mmethodSignature&quot;, mmethodSignature);&#xA;ruleresult.registerObject(&quot;tParameter&quot;, tParameter);&#xA;ruleresult.registerObject(&quot;mEntry&quot;, mEntry);&#xA;ruleresult.registerObject(&quot;tParameterList&quot;, tParameterList);&#xA;ruleresult.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;, eSingleVariableDeclarationToTParameter);&#xA;ruleresult.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;, mmethodSignatureToTMethodSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tParameter&quot;, tParameter);&#xA;match.registerObject(&quot;tParameterList&quot;, tParameterList);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mmethodSignature&quot;,mmethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;,eSingleVariableDeclarationToTParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;,mmethodSignatureToTMethodSignature);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mmethodSignature&quot;, mmethodSignature);&#xA;ruleresult.registerObject(&quot;tParameter&quot;, tParameter);&#xA;ruleresult.registerObject(&quot;mEntry&quot;, mEntry);&#xA;ruleresult.registerObject(&quot;tParameterList&quot;, tParameterList);&#xA;ruleresult.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;, eSingleVariableDeclarationToTParameter);&#xA;ruleresult.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;, mmethodSignatureToTMethodSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mSignature&quot;, mSignature);&#xA;match.registerObject(&quot;mName&quot;, mName);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tParameterList_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tParameterList.ID&quot;, csp);&#xD;&#xA;var_tParameterList_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tSignature_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.ID&quot;, csp);&#xD;&#xA;var_tSignature_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tParameterList_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tSignature_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mName&quot;,mName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mNameToTName&quot;,mNameToTName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;mMethodSignatureToTMethodSignature&quot;, mMethodSignatureToTMethodSignature);&#xA;ruleresult.registerObject(&quot;mName&quot;, mName);&#xA;ruleresult.registerObject(&quot;mNameToTName&quot;, mNameToTName);&#xA;ruleresult.registerObject(&quot;tParameterList&quot;, tParameterList);&#xA;ruleresult.registerObject(&quot;mSignatureToTParameterList&quot;, mSignatureToTParameterList);&#xA;ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mSignature&quot;).eClass()).equals(&quot;modisco.MMethodSignature.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tParameterList_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tParameterList.ID&quot;, true, csp);&#xD;&#xA;var_tParameterList_ID.setValue(tParameterList.getID());&#xD;&#xA;var_tParameterList_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tSignature_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.ID&quot;, true, csp);&#xD;&#xA;var_tSignature_ID.setValue(tSignature.getID());&#xD;&#xA;var_tSignature_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tParameterList_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tSignature_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tSignature&quot;, tSignature);&#xA;match.registerObject(&quot;tParameterList&quot;, tParameterList);&#xA;match.registerObject(&quot;tName&quot;, tName);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mName&quot;,mName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mNameToTName&quot;,mNameToTName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;mMethodSignatureToTMethodSignature&quot;, mMethodSignatureToTMethodSignature);&#xA;ruleresult.registerObject(&quot;mName&quot;, mName);&#xA;ruleresult.registerObject(&quot;mNameToTName&quot;, mNameToTName);&#xA;ruleresult.registerObject(&quot;tParameterList&quot;, tParameterList);&#xA;ruleresult.registerObject(&quot;mSignatureToTParameterList&quot;, mSignatureToTParameterList);&#xA;ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tSignature&quot;).eClass()).equals(&quot;basic.TMethodSignature.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tParameterList&quot;).eClass()).equals(&quot;basic.TParameterList.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;match.registerObject(&quot;eType&quot;, eType);&#xA;match.registerObject(&quot;eArrayType&quot;, eArrayType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eType&quot;,eType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeToTArrayClass&quot;,eTypeToTArrayClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eArrayType&quot;,eArrayType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tArrayClass&quot;,tArrayClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;eType&quot;, eType);&#xA;ruleresult.registerObject(&quot;eTypeToTArrayClass&quot;, eTypeToTArrayClass);&#xA;ruleresult.registerObject(&quot;eArrayType&quot;, eArrayType);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;tArrayClass&quot;, tArrayClass);&#xA;ruleresult.registerObject(&quot;eArrayTypeToTArrayClass&quot;, eArrayTypeToTArrayClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eArrayType&quot;).eClass()).equals(&quot;java.ArrayType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeBoolean.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeChar.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeByte.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeShort.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeLong.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeFloat.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeDouble.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mSignature&quot;, mSignature);&#xA;match.registerObject(&quot;eMethodDeclaration&quot;, eMethodDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tMethodDefinition_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodDefinition.ID&quot;, csp);&#xD;&#xA;var_tMethodDefinition_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tMethodDefinition_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethodSignature&quot;,tMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTMethodSignature&quot;,mSignatureToTMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethod&quot;,tMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eMethodDeclaration&quot;,eMethodDeclaration);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;tMethodSignature&quot;, tMethodSignature);&#xA;ruleresult.registerObject(&quot;mDeclarationToTDefinition&quot;, mDeclarationToTDefinition);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;mSignatureToTMethodSignature&quot;, mSignatureToTMethodSignature);&#xA;ruleresult.registerObject(&quot;eMethodDeclarationToTMethodSignature&quot;, eMethodDeclarationToTMethodSignature);&#xA;ruleresult.registerObject(&quot;tMethod&quot;, tMethod);&#xA;ruleresult.registerObject(&quot;eMethodDeclaration&quot;, eMethodDeclaration);&#xA;ruleresult.registerObject(&quot;eMethodDeclarationToTMethod&quot;, eMethodDeclarationToTMethod);&#xA;ruleresult.registerObject(&quot;tMethodDefinition&quot;, tMethodDefinition);&#xA;ruleresult.registerObject(&quot;mDefinitionToTSignature&quot;, mDefinitionToTSignature);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eMethodDeclaration&quot;).eClass()).equals(&quot;modisco.MMethodDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tMethodDefinition_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodDefinition.ID&quot;, true, csp);&#xD;&#xA;var_tMethodDefinition_ID.setValue(tMethodDefinition.getID());&#xD;&#xA;var_tMethodDefinition_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tMethodDefinition_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMethodSignature&quot;, tMethodSignature);&#xA;match.registerObject(&quot;tMethod&quot;, tMethod);&#xA;match.registerObject(&quot;tMethodDefinition&quot;, tMethodDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethodSignature&quot;,tMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTMethodSignature&quot;,mSignatureToTMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethod&quot;,tMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethodDefinition&quot;,tMethodDefinition);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;tMethodSignature&quot;, tMethodSignature);&#xA;ruleresult.registerObject(&quot;mDeclarationToTDefinition&quot;, mDeclarationToTDefinition);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;mSignatureToTMethodSignature&quot;, mSignatureToTMethodSignature);&#xA;ruleresult.registerObject(&quot;eMethodDeclarationToTMethodSignature&quot;, eMethodDeclarationToTMethodSignature);&#xA;ruleresult.registerObject(&quot;tMethod&quot;, tMethod);&#xA;ruleresult.registerObject(&quot;eMethodDeclaration&quot;, eMethodDeclaration);&#xA;ruleresult.registerObject(&quot;eMethodDeclarationToTMethod&quot;, eMethodDeclarationToTMethod);&#xA;ruleresult.registerObject(&quot;tMethodDefinition&quot;, tMethodDefinition);&#xA;ruleresult.registerObject(&quot;mDefinitionToTSignature&quot;, mDefinitionToTSignature);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tMethodDefinition&quot;).eClass()).equals(&quot;basic.TMethodDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;number&quot;, number);&#xA;match.registerObject(&quot;member&quot;, member);&#xA;match.registerObject(&quot;mBody&quot;, mBody);&#xA;match.registerObject(&quot;value&quot;, value);&#xA;match.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;match.registerObject(&quot;mAccess&quot;, mAccess);&#xA;match.registerObject(&quot;mAnnotationType&quot;, mAnnotationType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_number_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;number.tokenValue&quot;, true, csp);&#xD;&#xA;var_number_tokenValue.setValue(number.getTokenValue());&#xD;&#xA;var_number_tokenValue.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tAnnotation_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnnotation.ID&quot;, csp);&#xD;&#xA;var_tAnnotation_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;StringToInt stringToInt = new StringToInt();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(stringToInt);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;stringToInt.setRuleName(&quot;&quot;);&#xD;&#xA;stringToInt.solve(var_number_tokenValue,var_tAnnotation_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;number&quot;,number);&#xD;&#xA;isApplicableMatch.registerObject(&quot;member&quot;,member);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAnnotationType&quot;,tAnnotationType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mAnnotationTypeToTAnnotationType&quot;,mAnnotationTypeToTAnnotationType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mBody&quot;,mBody);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAnnotable&quot;,tAnnotable);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mBodyToTAnnotable&quot;,mBodyToTAnnotable);&#xD;&#xA;isApplicableMatch.registerObject(&quot;value&quot;,value);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mAccess&quot;,mAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mAnnotationType&quot;,mAnnotationType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;number&quot;, number);&#xA;ruleresult.registerObject(&quot;member&quot;, member);&#xA;ruleresult.registerObject(&quot;tAnnotationType&quot;, tAnnotationType);&#xA;ruleresult.registerObject(&quot;mAnnotationTypeToTAnnotationType&quot;, mAnnotationTypeToTAnnotationType);&#xA;ruleresult.registerObject(&quot;mBody&quot;, mBody);&#xA;ruleresult.registerObject(&quot;tAnnotable&quot;, tAnnotable);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotable&quot;, mBodyToTAnnotable);&#xA;ruleresult.registerObject(&quot;value&quot;, value);&#xA;ruleresult.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mAnnotationToTAnnotation&quot;, mAnnotationToTAnnotation);&#xA;ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mAnnotationType&quot;, mAnnotationType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;number&quot;).eClass()).equals(&quot;java.NumberLiteral.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;value&quot;).eClass()).equals(&quot;java.AnnotationMemberValuePair.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAnnotation&quot;).eClass()).equals(&quot;java.Annotation.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAnnotationType&quot;, tAnnotationType);&#xA;match.registerObject(&quot;tAnnotable&quot;, tAnnotable);&#xA;match.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tAnnotation_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnnotation.ID&quot;, true, csp);&#xD;&#xA;var_tAnnotation_ID.setValue(tAnnotation.getID());&#xD;&#xA;var_tAnnotation_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_number_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;number.tokenValue&quot;, csp);&#xD;&#xA;var_number_tokenValue.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;StringToInt stringToInt = new StringToInt();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(stringToInt);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;stringToInt.setRuleName(&quot;&quot;);&#xD;&#xA;stringToInt.solve(var_number_tokenValue,var_tAnnotation_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;member&quot;,member);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAnnotationType&quot;,tAnnotationType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mAnnotationTypeToTAnnotationType&quot;,mAnnotationTypeToTAnnotationType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mBody&quot;,mBody);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAnnotable&quot;,tAnnotable);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mBodyToTAnnotable&quot;,mBodyToTAnnotable);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mAnnotationType&quot;,mAnnotationType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;number&quot;, number);&#xA;ruleresult.registerObject(&quot;member&quot;, member);&#xA;ruleresult.registerObject(&quot;tAnnotationType&quot;, tAnnotationType);&#xA;ruleresult.registerObject(&quot;mAnnotationTypeToTAnnotationType&quot;, mAnnotationTypeToTAnnotationType);&#xA;ruleresult.registerObject(&quot;mBody&quot;, mBody);&#xA;ruleresult.registerObject(&quot;tAnnotable&quot;, tAnnotable);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotable&quot;, mBodyToTAnnotable);&#xA;ruleresult.registerObject(&quot;value&quot;, value);&#xA;ruleresult.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mAnnotationToTAnnotation&quot;, mAnnotationToTAnnotation);&#xA;ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mAnnotationType&quot;, mAnnotationType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAnnotation&quot;).eClass()).equals(&quot;basic.TAnnotation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;match.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;%ENUM%&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;$&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, csp);&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, csp);&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, csp);&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;&quot;);&#xD;&#xA;addPrefix.solve(literal0,var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal1,var_tNestedPackage_tName);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eNestedType&quot;,eNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;tNestedPackage&quot;, tNestedPackage);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eNestedType&quot;).eClass()).equals(&quot;java.EnumDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(tNestedType.getID());&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(tNestedPackage.getID());&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tNestedPackage&quot;, tNestedPackage);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;match.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;match.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;%ENUM%&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;$&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(tNestedPackage.getTName());&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal1,var_tNestedPackage_tName);&#xD;&#xA;addPrefix.setRuleName(&quot;&quot;);&#xD;&#xA;addPrefix.solve(literal0,var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedPackage&quot;,tNestedPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;tNestedPackage&quot;, tNestedPackage);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedPackage&quot;).eClass()).equals(&quot;basic.TPackage.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedType&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeVoid.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;ePrimitiveTypeToTPrimitiveClass&quot;, ePrimitiveTypeToTPrimitiveClass);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;match.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;match.registerObject(&quot;eReturnType&quot;, eReturnType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eReturnType&quot;,eReturnType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethodDefinition&quot;,tMethodDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eReturnTypeToTAbstractType&quot;,eReturnTypeToTAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eMethodDeclarationToTMethodDefinition&quot;,eMethodDeclarationToTMethodDefinition);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;eReturnType&quot;, eReturnType);&#xA;ruleresult.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;ruleresult.registerObject(&quot;tMethodDefinition&quot;, tMethodDefinition);&#xA;ruleresult.registerObject(&quot;eReturnTypeToTAbstractType&quot;, eReturnTypeToTAbstractType);&#xA;ruleresult.registerObject(&quot;eMethodDeclarationToTMethodDefinition&quot;, eMethodDeclarationToTMethodDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;match.registerObject(&quot;tMethodDefinition&quot;, tMethodDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eReturnType&quot;,eReturnType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethodDefinition&quot;,tMethodDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eReturnTypeToTAbstractType&quot;,eReturnTypeToTAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eMethodDeclarationToTMethodDefinition&quot;,eMethodDeclarationToTMethodDefinition);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;eReturnType&quot;, eReturnType);&#xA;ruleresult.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;ruleresult.registerObject(&quot;tMethodDefinition&quot;, tMethodDefinition);&#xA;ruleresult.registerObject(&quot;eReturnTypeToTAbstractType&quot;, eReturnTypeToTAbstractType);&#xA;ruleresult.registerObject(&quot;eMethodDeclarationToTMethodDefinition&quot;, eMethodDeclarationToTMethodDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mPrevEntry&quot;, mPrevEntry);&#xA;match.registerObject(&quot;mEntry&quot;, mEntry);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPrevEntry&quot;,mPrevEntry);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;,mmethodSignatureToTMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrevParameter&quot;,tPrevParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;,eSingleVariableDeclarationToTParameter);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPrevEntry&quot;, mPrevEntry);&#xA;ruleresult.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;, mmethodSignatureToTMethodSignature);&#xA;ruleresult.registerObject(&quot;tPrevParameter&quot;, tPrevParameter);&#xA;ruleresult.registerObject(&quot;mEntry&quot;, mEntry);&#xA;ruleresult.registerObject(&quot;tParameter&quot;, tParameter);&#xA;ruleresult.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;, eSingleVariableDeclarationToTParameter);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tPrevParameter&quot;, tPrevParameter);&#xA;match.registerObject(&quot;tParameter&quot;, tParameter);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPrevEntry&quot;,mPrevEntry);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;,mmethodSignatureToTMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrevParameter&quot;,tPrevParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;,eSingleVariableDeclarationToTParameter);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPrevEntry&quot;, mPrevEntry);&#xA;ruleresult.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;, mmethodSignatureToTMethodSignature);&#xA;ruleresult.registerObject(&quot;tPrevParameter&quot;, tPrevParameter);&#xA;ruleresult.registerObject(&quot;mEntry&quot;, mEntry);&#xA;ruleresult.registerObject(&quot;tParameter&quot;, tParameter);&#xA;ruleresult.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;, eSingleVariableDeclarationToTParameter);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mModel&quot;, mModel);&#xA;match.registerObject(&quot;mName&quot;, mName);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mName.mName&quot;, true, csp);&#xD;&#xA;var_mName_mName.setValue(mName.getMName());&#xD;&#xA;var_mName_mName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, csp);&#xD;&#xA;var_tName_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tName_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.ID&quot;, csp);&#xD;&#xA;var_tName_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mName_mName,var_tName_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tName_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;modelToPg&quot;,modelToPg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mName&quot;,mName);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;modelToPg&quot;, modelToPg);&#xA;ruleresult.registerObject(&quot;mName&quot;, mName);&#xA;ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;mNameToTName&quot;, mNameToTName);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mName&quot;).eClass()).equals(&quot;modisco.MMethodName.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tName_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.ID&quot;, true, csp);&#xD;&#xA;var_tName_ID.setValue(tName.getID());&#xD;&#xA;var_tName_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tName_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pg&quot;, pg);&#xA;match.registerObject(&quot;tName&quot;, tName);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, true, csp);&#xD;&#xA;var_tName_tName.setValue(tName.getTName());&#xD;&#xA;var_tName_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mName.mName&quot;, csp);&#xD;&#xA;var_mName_mName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mName_mName,var_tName_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;modelToPg&quot;,modelToPg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;modelToPg&quot;, modelToPg);&#xA;ruleresult.registerObject(&quot;mName&quot;, mName);&#xA;ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;mNameToTName&quot;, mNameToTName);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tName&quot;).eClass()).equals(&quot;basic.TMethod.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mSignature&quot;, mSignature);&#xA;match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tSignature&quot;, tSignature);&#xA;match.registerObject(&quot;tType&quot;, tType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mMethodSignature&quot;, mMethodSignature);&#xA;match.registerObject(&quot;mEntry&quot;, mEntry);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignatureToTParameterList&quot;,mMethodSignatureToTParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignature&quot;,mMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mMethodSignatureToTParameterList&quot;, mMethodSignatureToTParameterList);&#xA;ruleresult.registerObject(&quot;tParameterList&quot;, tParameterList);&#xA;ruleresult.registerObject(&quot;mMethodSignature&quot;, mMethodSignature);&#xA;ruleresult.registerObject(&quot;mEntry&quot;, mEntry);&#xA;ruleresult.registerObject(&quot;mEntryToTParameter&quot;, mEntryToTParameter);&#xA;ruleresult.registerObject(&quot;tParameter&quot;, tParameter);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mEntry&quot;).eClass()).equals(&quot;modisco.MEntry.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tParameterList&quot;, tParameterList);&#xA;match.registerObject(&quot;tParameter&quot;, tParameter);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignatureToTParameterList&quot;,mMethodSignatureToTParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignature&quot;,mMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mMethodSignatureToTParameterList&quot;, mMethodSignatureToTParameterList);&#xA;ruleresult.registerObject(&quot;tParameterList&quot;, tParameterList);&#xA;ruleresult.registerObject(&quot;mMethodSignature&quot;, mMethodSignature);&#xA;ruleresult.registerObject(&quot;mEntry&quot;, mEntry);&#xA;ruleresult.registerObject(&quot;mEntryToTParameter&quot;, mEntryToTParameter);&#xA;ruleresult.registerObject(&quot;tParameter&quot;, tParameter);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tParameter&quot;).eClass()).equals(&quot;basic.TParameter.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;match.registerObject(&quot;mField&quot;, mField);&#xA;match.registerObject(&quot;varAccess&quot;, varAccess);&#xA;match.registerObject(&quot;varDeclFrag&quot;, varDeclFrag);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTDefinition&quot;,mDefinitionToTDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mField&quot;,mField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varAccess&quot;,varAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varDeclFrag&quot;,varDeclFrag);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varDeclFragToTField&quot;,varDeclFragToTField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varAccessToTAccess&quot;,varAccessToTAccess);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;mDefinitionToTDefinition&quot;, mDefinitionToTDefinition);&#xA;ruleresult.registerObject(&quot;mField&quot;, mField);&#xA;ruleresult.registerObject(&quot;mMethodToTMethod&quot;, mMethodToTMethod);&#xA;ruleresult.registerObject(&quot;varAccess&quot;, varAccess);&#xA;ruleresult.registerObject(&quot;varDeclFrag&quot;, varDeclFrag);&#xA;ruleresult.registerObject(&quot;varDeclFragToTField&quot;, varDeclFragToTField);&#xA;ruleresult.registerObject(&quot;varAccessToTAccess&quot;, varAccessToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;match.registerObject(&quot;tField&quot;, tField);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTDefinition&quot;,mDefinitionToTDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mField&quot;,mField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varAccess&quot;,varAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varDeclFrag&quot;,varDeclFrag);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varDeclFragToTField&quot;,varDeclFragToTField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varAccessToTAccess&quot;,varAccessToTAccess);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;mDefinitionToTDefinition&quot;, mDefinitionToTDefinition);&#xA;ruleresult.registerObject(&quot;mField&quot;, mField);&#xA;ruleresult.registerObject(&quot;mMethodToTMethod&quot;, mMethodToTMethod);&#xA;ruleresult.registerObject(&quot;varAccess&quot;, varAccess);&#xA;ruleresult.registerObject(&quot;varDeclFrag&quot;, varDeclFrag);&#xA;ruleresult.registerObject(&quot;varDeclFragToTField&quot;, varDeclFragToTField);&#xA;ruleresult.registerObject(&quot;varAccessToTAccess&quot;, varAccessToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mPackage&quot;, mPackage);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;%ENUM%&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(mType.getName());&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(mType.isProxy());&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, csp);&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;&quot;);&#xD;&#xA;addPrefix.solve(literal0,var_mType_name,var_tType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mType&quot;).eClass()).equals(&quot;java.EnumDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(tType.getID());&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;%ENUM%&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(tType.getTName());&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(tType.isTLib());&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;&quot;);&#xD;&#xA;addPrefix.solve(literal0,var_mType_name,var_tType_tName);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tType&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocation&quot;).eClass()).equals(&quot;java.MethodInvocation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAccess&quot;).eClass()).equals(&quot;basic.TAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocation&quot;).eClass()).equals(&quot;java.SuperMethodInvocation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAccess&quot;).eClass()).equals(&quot;basic.TAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocation&quot;).eClass()).equals(&quot;java.ConstructorInvocation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAccess&quot;).eClass()).equals(&quot;basic.TAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocation&quot;).eClass()).equals(&quot;java.SuperConstructorInvocation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAccess&quot;).eClass()).equals(&quot;basic.TAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eModel&quot;, eModel);&#xA;match.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.ID&quot;, csp);&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tClass_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;ruleresult.registerObject(&quot;eModelToPg&quot;, eModelToPg);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eAnonymousClassDeclaration&quot;).eClass()).equals(&quot;java.TypeParameter.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.ID&quot;, true, csp);&#xD;&#xA;var_tClass_ID.setValue(tClass.getID());&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tClass_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pg&quot;, pg);&#xA;match.registerObject(&quot;tClass&quot;, tClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;ruleresult.registerObject(&quot;eModelToPg&quot;, eModelToPg);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eConstructorDeclaration&quot;, eConstructorDeclaration);&#xA;match.registerObject(&quot;eOuterClass&quot;, eOuterClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eConstructorDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eConstructorDeclaration.name&quot;, true, csp);&#xD;&#xA;var_eConstructorDeclaration_name.setValue(eConstructorDeclaration.getName());&#xD;&#xA;var_eConstructorDeclaration_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tName_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.ID&quot;, csp);&#xD;&#xA;var_tName_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tSig_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSig.ID&quot;, csp);&#xD;&#xA;var_tSig_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tConstructorDef_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tConstructorDef.ID&quot;, csp);&#xD;&#xA;var_tConstructorDef_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, csp);&#xD;&#xA;var_tName_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;CreateID createID_1 = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(createID_1);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tName_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tSig_ID);&#xD;&#xA;createID_1.setRuleName(&quot;&quot;);&#xD;&#xA;createID_1.solve(var_tConstructorDef_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eConstructorDeclaration_name,var_tName_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eConstructorDeclaration&quot;,eConstructorDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tParameterList&quot;, tParameterList);&#xA;ruleresult.registerObject(&quot;eConstructorDeclarationToTParameterList&quot;, eConstructorDeclarationToTParameterList);&#xA;ruleresult.registerObject(&quot;eConstructorDeclarationToTConstructorDef&quot;, eConstructorDeclarationToTConstructorDef);&#xA;ruleresult.registerObject(&quot;eOuterClassToTOuterClass&quot;, eOuterClassToTOuterClass);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tOuterClass&quot;, tOuterClass);&#xA;ruleresult.registerObject(&quot;eConstructorDeclaration&quot;, eConstructorDeclaration);&#xA;ruleresult.registerObject(&quot;eOuterClass&quot;, eOuterClass);&#xA;ruleresult.registerObject(&quot;tConstructorDef&quot;, tConstructorDef);&#xA;ruleresult.registerObject(&quot;tSig&quot;, tSig);&#xA;ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;eConstructorDeclarationToTSig&quot;, eConstructorDeclarationToTSig);&#xA;ruleresult.registerObject(&quot;eConstructorDeclarationToTName&quot;, eConstructorDeclarationToTName);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eConstructorDeclaration&quot;).eClass()).equals(&quot;modisco.MConstructorDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tName_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.ID&quot;, true, csp);&#xD;&#xA;var_tName_ID.setValue(tName.getID());&#xD;&#xA;var_tName_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tSig_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSig.ID&quot;, true, csp);&#xD;&#xA;var_tSig_ID.setValue(tSig.getID());&#xD;&#xA;var_tSig_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tConstructorDef_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tConstructorDef.ID&quot;, true, csp);&#xD;&#xA;var_tConstructorDef_ID.setValue(tConstructorDef.getID());&#xD;&#xA;var_tConstructorDef_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;CreateID createID_1 = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(createID_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tName_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tSig_ID);&#xD;&#xA;createID_1.setRuleName(&quot;&quot;);&#xD;&#xA;createID_1.solve(var_tConstructorDef_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tParameterList&quot;, tParameterList);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tOuterClass&quot;, tOuterClass);&#xA;match.registerObject(&quot;tConstructorDef&quot;, tConstructorDef);&#xA;match.registerObject(&quot;tSig&quot;, tSig);&#xA;match.registerObject(&quot;tName&quot;, tName);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, true, csp);&#xD;&#xA;var_tName_tName.setValue(tName.getTName());&#xD;&#xA;var_tName_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_eConstructorDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eConstructorDeclaration.name&quot;, csp);&#xD;&#xA;var_eConstructorDeclaration_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eConstructorDeclaration_name,var_tName_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tConstructorDef&quot;,tConstructorDef);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSig&quot;,tSig);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tParameterList&quot;, tParameterList);&#xA;ruleresult.registerObject(&quot;eConstructorDeclarationToTParameterList&quot;, eConstructorDeclarationToTParameterList);&#xA;ruleresult.registerObject(&quot;eConstructorDeclarationToTConstructorDef&quot;, eConstructorDeclarationToTConstructorDef);&#xA;ruleresult.registerObject(&quot;eOuterClassToTOuterClass&quot;, eOuterClassToTOuterClass);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tOuterClass&quot;, tOuterClass);&#xA;ruleresult.registerObject(&quot;eConstructorDeclaration&quot;, eConstructorDeclaration);&#xA;ruleresult.registerObject(&quot;eOuterClass&quot;, eOuterClass);&#xA;ruleresult.registerObject(&quot;tConstructorDef&quot;, tConstructorDef);&#xA;ruleresult.registerObject(&quot;tSig&quot;, tSig);&#xA;ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;eConstructorDeclarationToTSig&quot;, eConstructorDeclarationToTSig);&#xA;ruleresult.registerObject(&quot;eConstructorDeclarationToTName&quot;, eConstructorDeclarationToTName);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tParameterList&quot;).eClass()).equals(&quot;basic.TParameterList.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tConstructorDef&quot;).eClass()).equals(&quot;basic.TMethodDefinition.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tSig&quot;).eClass()).equals(&quot;basic.TMethodSignature.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tName&quot;).eClass()).equals(&quot;basic.TMethod.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eModel&quot;, eModel);&#xA;match.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eAnonymousClassDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eAnonymousClassDeclaration.name&quot;, true, csp);&#xD;&#xA;var_eAnonymousClassDeclaration_name.setValue(eAnonymousClassDeclaration.getName());&#xD;&#xA;var_eAnonymousClassDeclaration_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eAnonymousClassDeclaration_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eAnonymousClassDeclaration.proxy&quot;, true, csp);&#xD;&#xA;var_eAnonymousClassDeclaration_proxy.setValue(eAnonymousClassDeclaration.isProxy());&#xD;&#xA;var_eAnonymousClassDeclaration_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.ID&quot;, csp);&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, csp);&#xD;&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tLib&quot;, csp);&#xD;&#xA;var_tClass_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tClass_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eAnonymousClassDeclaration_name,var_tClass_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eAnonymousClassDeclaration_proxy,var_tClass_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;ruleresult.registerObject(&quot;eModelToPg&quot;, eModelToPg);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eAnonymousClassDeclaration&quot;).eClass()).equals(&quot;java.UnresolvedTypeDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.ID&quot;, true, csp);&#xD;&#xA;var_tClass_ID.setValue(tClass.getID());&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tClass_ID);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pg&quot;, pg);&#xA;match.registerObject(&quot;tClass&quot;, tClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xD;&#xA;var_tClass_tName.setValue(tClass.getTName());&#xD;&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tLib&quot;, true, csp);&#xD;&#xA;var_tClass_tLib.setValue(tClass.isTLib());&#xD;&#xA;var_tClass_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_eAnonymousClassDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eAnonymousClassDeclaration.name&quot;, csp);&#xD;&#xA;var_eAnonymousClassDeclaration_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eAnonymousClassDeclaration_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eAnonymousClassDeclaration.proxy&quot;, csp);&#xD;&#xA;var_eAnonymousClassDeclaration_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eAnonymousClassDeclaration_name,var_tClass_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eAnonymousClassDeclaration_proxy,var_tClass_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;ruleresult.registerObject(&quot;eModelToPg&quot;, eModelToPg);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;CompilationUnit&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;CompilationUnit&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ModelToPg&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModel&quot;, true, csp);&#xD;&#xA;var_mModel_name.setValue(__helper.getValue(&quot;mModel&quot;, &quot;name&quot;));&#xD;&#xA;var_mModel_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tPG_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPG&quot;, true, csp);&#xD;&#xA;var_tPG_tName.setValue(__helper.getValue(&quot;tPG&quot;, &quot;tName&quot;));&#xD;&#xA;var_tPG_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ModelToPg&quot;);&#xD;&#xA;eq0.solve(var_mModel_name,var_tPG_tName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tPG_tName.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_mModel_name,var_tPG_tName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tPG&quot;, &quot;tName&quot;, var_tPG_tName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ModelToPg&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModel&quot;, true, csp);&#xD;&#xA;var_mModel_name.setValue(__helper.getValue(&quot;mModel&quot;, &quot;name&quot;));&#xD;&#xA;var_mModel_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tPG_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPG&quot;, true, csp);&#xD;&#xA;var_tPG_tName.setValue(__helper.getValue(&quot;tPG&quot;, &quot;tName&quot;));&#xD;&#xA;var_tPG_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ModelToPg&quot;);&#xD;&#xA;eq0.solve(var_mModel_name,var_tPG_tName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_mModel_name.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_mModel_name,var_tPG_tName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;mModel&quot;, &quot;name&quot;, var_mModel_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PackageToPGPackage&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage&quot;, true, csp);&#xD;&#xA;var_mPackage_name.setValue(__helper.getValue(&quot;mPackage&quot;, &quot;name&quot;));&#xD;&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPackage&quot;, true, csp);&#xD;&#xA;var_tPackage_tName.setValue(__helper.getValue(&quot;tPackage&quot;, &quot;tName&quot;));&#xD;&#xA;var_tPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PackageToPGPackage&quot;);&#xD;&#xA;eq0.solve(var_mPackage_name,var_tPackage_tName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tPackage_tName.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_mPackage_name,var_tPackage_tName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tPackage&quot;, &quot;tName&quot;, var_tPackage_tName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PackageToPGPackage&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage&quot;, true, csp);&#xD;&#xA;var_mPackage_name.setValue(__helper.getValue(&quot;mPackage&quot;, &quot;name&quot;));&#xD;&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPackage&quot;, true, csp);&#xD;&#xA;var_tPackage_tName.setValue(__helper.getValue(&quot;tPackage&quot;, &quot;tName&quot;));&#xD;&#xA;var_tPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PackageToPGPackage&quot;);&#xD;&#xA;eq0.solve(var_mPackage_name,var_tPackage_tName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_mPackage_name.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_mPackage_name,var_tPackage_tName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;mPackage&quot;, &quot;name&quot;, var_mPackage_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SubPackageToPGPackage&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage&quot;, true, csp);&#xD;&#xA;var_mPackage_name.setValue(__helper.getValue(&quot;mPackage&quot;, &quot;name&quot;));&#xD;&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tSub_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSub&quot;, true, csp);&#xD;&#xA;var_tSub_tName.setValue(__helper.getValue(&quot;tSub&quot;, &quot;tName&quot;));&#xD;&#xA;var_tSub_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SubPackageToPGPackage&quot;);&#xD;&#xA;eq0.solve(var_mPackage_name,var_tSub_tName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tSub_tName.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_mPackage_name,var_tSub_tName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tSub&quot;, &quot;tName&quot;, var_tSub_tName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SubPackageToPGPackage&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage&quot;, true, csp);&#xD;&#xA;var_mPackage_name.setValue(__helper.getValue(&quot;mPackage&quot;, &quot;name&quot;));&#xD;&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tSub_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSub&quot;, true, csp);&#xD;&#xA;var_tSub_tName.setValue(__helper.getValue(&quot;tSub&quot;, &quot;tName&quot;));&#xD;&#xA;var_tSub_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SubPackageToPGPackage&quot;);&#xD;&#xA;eq0.solve(var_mPackage_name,var_tSub_tName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_mPackage_name.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_mPackage_name,var_tSub_tName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;mPackage&quot;, &quot;name&quot;, var_mPackage_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NestedInterfaceInType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(__helper.getValue(&quot;eOuterType&quot;, &quot;name&quot;));&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;$&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;AddSuffix addSuffix2 = new AddSuffix();&#xD;&#xA;csp.getConstraints().add(addSuffix2);&#xA;&#xA;CreateID createID3 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID3);&#xA;&#xA;Eq eq4 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq4);&#xA;&#xA;eq0.setRuleName(&quot;NestedInterfaceInType&quot;);&#xD;&#xA;eq0.solve(var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;createID1.setRuleName(&quot;NestedInterfaceInType&quot;);&#xD;&#xA;createID1.solve(var_tNestedType_ID);&#xA;&#xA;addSuffix2.setRuleName(&quot;NestedInterfaceInType&quot;);&#xD;&#xA;addSuffix2.solve(var_eOuterType_name,var_literal0,var_tNestedPackage_tName);&#xA;&#xA;createID3.setRuleName(&quot;NestedInterfaceInType&quot;);&#xD;&#xA;createID3.solve(var_tNestedPackage_ID);&#xA;&#xA;eq4.setRuleName(&quot;NestedInterfaceInType&quot;);&#xD;&#xA;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tNestedType_tName.setBound(false);&#xD;&#xA;&#x9;var_tNestedType_ID.setBound(false);&#xD;&#xA;&#x9;var_tNestedPackage_tName.setBound(false);&#xD;&#xA;&#x9;var_tNestedPackage_ID.setBound(false);&#xD;&#xA;&#x9;var_tNestedType_tLib.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;&#x9;createID1.solve(var_tNestedType_ID);&#xD;&#xA;&#x9;addSuffix2.solve(var_eOuterType_name,var_literal0,var_tNestedPackage_tName);&#xD;&#xA;&#x9;createID3.solve(var_tNestedPackage_ID);&#xD;&#xA;&#x9;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tName&quot;, var_tNestedType_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;ID&quot;, var_tNestedType_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedPackage&quot;, &quot;tName&quot;, var_tNestedPackage_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedPackage&quot;, &quot;ID&quot;, var_tNestedPackage_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tLib&quot;, var_tNestedType_tLib.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NestedInterfaceInType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(__helper.getValue(&quot;eOuterType&quot;, &quot;name&quot;));&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;$&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;AddSuffix addSuffix1 = new AddSuffix();&#xD;&#xA;csp.getConstraints().add(addSuffix1);&#xA;&#xA;CreateID createID2 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID2);&#xA;&#xA;Eq eq3 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq3);&#xA;&#xA;Eq eq4 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq4);&#xA;&#xA;createID0.setRuleName(&quot;NestedInterfaceInType&quot;);&#xD;&#xA;createID0.solve(var_tNestedType_ID);&#xA;&#xA;addSuffix1.setRuleName(&quot;NestedInterfaceInType&quot;);&#xD;&#xA;addSuffix1.solve(var_eOuterType_name,var_literal0,var_tNestedPackage_tName);&#xA;&#xA;createID2.setRuleName(&quot;NestedInterfaceInType&quot;);&#xD;&#xA;createID2.solve(var_tNestedPackage_ID);&#xA;&#xA;eq3.setRuleName(&quot;NestedInterfaceInType&quot;);&#xD;&#xA;eq3.solve(var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;eq4.setRuleName(&quot;NestedInterfaceInType&quot;);&#xD;&#xA;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_eNestedType_name.setBound(false);&#xD;&#xA;&#x9;var_eNestedType_proxy.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tNestedType_ID);&#xD;&#xA;&#x9;addSuffix1.solve(var_eOuterType_name,var_literal0,var_tNestedPackage_tName);&#xD;&#xA;&#x9;createID2.solve(var_tNestedPackage_ID);&#xD;&#xA;&#x9;eq3.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;&#x9;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;name&quot;, var_eNestedType_name.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;proxy&quot;, var_eNestedType_proxy.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ParameterizedTypeToClass&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ParameterizedTypeToClass&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NestedClassInType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(__helper.getValue(&quot;eOuterType&quot;, &quot;name&quot;));&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;$&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;AddSuffix addSuffix2 = new AddSuffix();&#xD;&#xA;csp.getConstraints().add(addSuffix2);&#xA;&#xA;CreateID createID3 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID3);&#xA;&#xA;Eq eq4 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq4);&#xA;&#xA;eq0.setRuleName(&quot;NestedClassInType&quot;);&#xD;&#xA;eq0.solve(var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;createID1.setRuleName(&quot;NestedClassInType&quot;);&#xD;&#xA;createID1.solve(var_tNestedType_ID);&#xA;&#xA;addSuffix2.setRuleName(&quot;NestedClassInType&quot;);&#xD;&#xA;addSuffix2.solve(var_eOuterType_name,var_literal0,var_tNestedPackage_tName);&#xA;&#xA;createID3.setRuleName(&quot;NestedClassInType&quot;);&#xD;&#xA;createID3.solve(var_tNestedPackage_ID);&#xA;&#xA;eq4.setRuleName(&quot;NestedClassInType&quot;);&#xD;&#xA;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tNestedType_tName.setBound(false);&#xD;&#xA;&#x9;var_tNestedType_ID.setBound(false);&#xD;&#xA;&#x9;var_tNestedPackage_tName.setBound(false);&#xD;&#xA;&#x9;var_tNestedPackage_ID.setBound(false);&#xD;&#xA;&#x9;var_tNestedType_tLib.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;&#x9;createID1.solve(var_tNestedType_ID);&#xD;&#xA;&#x9;addSuffix2.solve(var_eOuterType_name,var_literal0,var_tNestedPackage_tName);&#xD;&#xA;&#x9;createID3.solve(var_tNestedPackage_ID);&#xD;&#xA;&#x9;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tName&quot;, var_tNestedType_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;ID&quot;, var_tNestedType_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedPackage&quot;, &quot;tName&quot;, var_tNestedPackage_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedPackage&quot;, &quot;ID&quot;, var_tNestedPackage_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tLib&quot;, var_tNestedType_tLib.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NestedClassInType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(__helper.getValue(&quot;eOuterType&quot;, &quot;name&quot;));&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;$&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;AddSuffix addSuffix1 = new AddSuffix();&#xD;&#xA;csp.getConstraints().add(addSuffix1);&#xA;&#xA;CreateID createID2 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID2);&#xA;&#xA;Eq eq3 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq3);&#xA;&#xA;Eq eq4 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq4);&#xA;&#xA;createID0.setRuleName(&quot;NestedClassInType&quot;);&#xD;&#xA;createID0.solve(var_tNestedType_ID);&#xA;&#xA;addSuffix1.setRuleName(&quot;NestedClassInType&quot;);&#xD;&#xA;addSuffix1.solve(var_eOuterType_name,var_literal0,var_tNestedPackage_tName);&#xA;&#xA;createID2.setRuleName(&quot;NestedClassInType&quot;);&#xD;&#xA;createID2.solve(var_tNestedPackage_ID);&#xA;&#xA;eq3.setRuleName(&quot;NestedClassInType&quot;);&#xD;&#xA;eq3.solve(var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;eq4.setRuleName(&quot;NestedClassInType&quot;);&#xD;&#xA;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_eNestedType_name.setBound(false);&#xD;&#xA;&#x9;var_eNestedType_proxy.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tNestedType_ID);&#xD;&#xA;&#x9;addSuffix1.solve(var_eOuterType_name,var_literal0,var_tNestedPackage_tName);&#xD;&#xA;&#x9;createID2.solve(var_tNestedPackage_ID);&#xD;&#xA;&#x9;eq3.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;&#x9;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;name&quot;, var_eNestedType_name.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;proxy&quot;, var_eNestedType_proxy.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SignatureReturnType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SignatureReturnType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Interface&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(__helper.getValue(&quot;tType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;eq0.setRuleName(&quot;Interface&quot;);&#xD;&#xA;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;createID1.setRuleName(&quot;Interface&quot;);&#xD;&#xA;createID1.solve(var_tType_ID);&#xA;&#xA;eq2.setRuleName(&quot;Interface&quot;);&#xD;&#xA;eq2.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tType_tName.setBound(false);&#xD;&#xA;&#x9;var_tType_ID.setBound(false);&#xD;&#xA;&#x9;var_tType_tLib.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_mType_name,var_tType_tName);&#xD;&#xA;&#x9;createID1.solve(var_tType_ID);&#xD;&#xA;&#x9;eq2.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tName&quot;, var_tType_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;ID&quot;, var_tType_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tLib&quot;, var_tType_tLib.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Interface&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(__helper.getValue(&quot;tType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;createID0.setRuleName(&quot;Interface&quot;);&#xD;&#xA;createID0.solve(var_tType_ID);&#xA;&#xA;eq1.setRuleName(&quot;Interface&quot;);&#xD;&#xA;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#xA;eq2.setRuleName(&quot;Interface&quot;);&#xD;&#xA;eq2.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_mType_name.setBound(false);&#xD;&#xA;&#x9;var_mType_proxy.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tType_ID);&#xD;&#xA;&#x9;eq1.solve(var_mType_name,var_tType_tName);&#xD;&#xA;&#x9;eq2.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;name&quot;, var_mType_name.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;proxy&quot;, var_mType_proxy.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FieldSignature&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tSignature_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature&quot;, true, csp);&#xD;&#xA;var_tSignature_ID.setValue(__helper.getValue(&quot;tSignature&quot;, &quot;ID&quot;));&#xD;&#xA;var_tSignature_ID.setType(&quot;int&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;createID0.setRuleName(&quot;FieldSignature&quot;);&#xD;&#xA;createID0.solve(var_tSignature_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tSignature_ID.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tSignature_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tSignature&quot;, &quot;ID&quot;, var_tSignature_ID.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FieldSignature&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tSignature_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature&quot;, true, csp);&#xD;&#xA;var_tSignature_ID.setValue(__helper.getValue(&quot;tSignature&quot;, &quot;ID&quot;));&#xD;&#xA;var_tSignature_ID.setType(&quot;int&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;createID0.setRuleName(&quot;FieldSignature&quot;);&#xD;&#xA;createID0.solve(var_tSignature_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;createID0.solve(var_tSignature_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodParameterType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodParameterType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;AnnotationType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(__helper.getValue(&quot;tType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationType&quot;);&#xD;&#xA;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;createID1.setRuleName(&quot;AnnotationType&quot;);&#xD;&#xA;createID1.solve(var_tType_ID);&#xA;&#xA;eq2.setRuleName(&quot;AnnotationType&quot;);&#xD;&#xA;eq2.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tType_tName.setBound(false);&#xD;&#xA;&#x9;var_tType_ID.setBound(false);&#xD;&#xA;&#x9;var_tType_tLib.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_mType_name,var_tType_tName);&#xD;&#xA;&#x9;createID1.solve(var_tType_ID);&#xD;&#xA;&#x9;eq2.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tName&quot;, var_tType_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;ID&quot;, var_tType_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tLib&quot;, var_tType_tLib.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;AnnotationType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(__helper.getValue(&quot;tType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;createID0.setRuleName(&quot;AnnotationType&quot;);&#xD;&#xA;createID0.solve(var_tType_ID);&#xA;&#xA;eq1.setRuleName(&quot;AnnotationType&quot;);&#xD;&#xA;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#xA;eq2.setRuleName(&quot;AnnotationType&quot;);&#xD;&#xA;eq2.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_mType_name.setBound(false);&#xD;&#xA;&#x9;var_mType_proxy.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tType_ID);&#xD;&#xA;&#x9;eq1.solve(var_mType_name,var_tType_tName);&#xD;&#xA;&#x9;eq2.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;name&quot;, var_mType_name.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;proxy&quot;, var_mType_proxy.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FieldAccessSource&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FieldAccessSource&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;InterfaceExtendsInterface&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;InterfaceExtendsInterface&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ClassExtendsClass&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ClassExtendsClass&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ClassImplementsInterface&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ClassImplementsInterface&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ClassInnerMethode&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tInnerClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xD;&#xA;var_tInnerClass_ID.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;ID&quot;));&#xD;&#xA;var_tInnerClass_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tInnerPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_ID.setValue(__helper.getValue(&quot;tInnerPackage&quot;, &quot;ID&quot;));&#xD;&#xA;var_tInnerPackage_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eInnerClass&quot;, true, csp);&#xD;&#xA;var_eInnerClass_name.setValue(__helper.getValue(&quot;eInnerClass&quot;, &quot;name&quot;));&#xD;&#xA;var_eInnerClass_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xD;&#xA;var_tInnerClass_tName.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;tName&quot;));&#xD;&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass&quot;, true, csp);&#xD;&#xA;var_tOuterClass_tName.setValue(__helper.getValue(&quot;tOuterClass&quot;, &quot;tName&quot;));&#xD;&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;$1&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tInnerPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_tName.setValue(__helper.getValue(&quot;tInnerPackage&quot;, &quot;tName&quot;));&#xD;&#xA;var_tInnerPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;AddSuffix addSuffix3 = new AddSuffix();&#xD;&#xA;csp.getConstraints().add(addSuffix3);&#xA;&#xA;createID0.setRuleName(&quot;ClassInnerMethode&quot;);&#xD;&#xA;createID0.solve(var_tInnerClass_ID);&#xA;&#xA;createID1.setRuleName(&quot;ClassInnerMethode&quot;);&#xD;&#xA;createID1.solve(var_tInnerPackage_ID);&#xA;&#xA;eq2.setRuleName(&quot;ClassInnerMethode&quot;);&#xD;&#xA;eq2.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xA;&#xA;addSuffix3.setRuleName(&quot;ClassInnerMethode&quot;);&#xD;&#xA;addSuffix3.solve(var_tOuterClass_tName,var_literal0,var_tInnerPackage_tName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tInnerClass_ID.setBound(false);&#xD;&#xA;&#x9;var_tInnerPackage_ID.setBound(false);&#xD;&#xA;&#x9;var_tInnerClass_tName.setBound(false);&#xD;&#xA;&#x9;var_tInnerPackage_tName.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tInnerClass_ID);&#xD;&#xA;&#x9;createID1.solve(var_tInnerPackage_ID);&#xD;&#xA;&#x9;eq2.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xD;&#xA;&#x9;addSuffix3.solve(var_tOuterClass_tName,var_literal0,var_tInnerPackage_tName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tInnerClass&quot;, &quot;ID&quot;, var_tInnerClass_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tInnerPackage&quot;, &quot;ID&quot;, var_tInnerPackage_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tInnerClass&quot;, &quot;tName&quot;, var_tInnerClass_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tInnerPackage&quot;, &quot;tName&quot;, var_tInnerPackage_tName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ClassInnerMethode&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tInnerClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xD;&#xA;var_tInnerClass_ID.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;ID&quot;));&#xD;&#xA;var_tInnerClass_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tInnerPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_ID.setValue(__helper.getValue(&quot;tInnerPackage&quot;, &quot;ID&quot;));&#xD;&#xA;var_tInnerPackage_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eInnerClass&quot;, true, csp);&#xD;&#xA;var_eInnerClass_name.setValue(__helper.getValue(&quot;eInnerClass&quot;, &quot;name&quot;));&#xD;&#xA;var_eInnerClass_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xD;&#xA;var_tInnerClass_tName.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;tName&quot;));&#xD;&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass&quot;, true, csp);&#xD;&#xA;var_tOuterClass_tName.setValue(__helper.getValue(&quot;tOuterClass&quot;, &quot;tName&quot;));&#xD;&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;$1&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tInnerPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_tName.setValue(__helper.getValue(&quot;tInnerPackage&quot;, &quot;tName&quot;));&#xD;&#xA;var_tInnerPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;AddSuffix addSuffix2 = new AddSuffix();&#xD;&#xA;csp.getConstraints().add(addSuffix2);&#xA;&#xA;Eq eq3 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq3);&#xA;&#xA;createID0.setRuleName(&quot;ClassInnerMethode&quot;);&#xD;&#xA;createID0.solve(var_tInnerClass_ID);&#xA;&#xA;createID1.setRuleName(&quot;ClassInnerMethode&quot;);&#xD;&#xA;createID1.solve(var_tInnerPackage_ID);&#xA;&#xA;addSuffix2.setRuleName(&quot;ClassInnerMethode&quot;);&#xD;&#xA;addSuffix2.solve(var_tOuterClass_tName,var_literal0,var_tInnerPackage_tName);&#xA;&#xA;eq3.setRuleName(&quot;ClassInnerMethode&quot;);&#xD;&#xA;eq3.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_eInnerClass_name.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tInnerClass_ID);&#xD;&#xA;&#x9;createID1.solve(var_tInnerPackage_ID);&#xD;&#xA;&#x9;addSuffix2.solve(var_tOuterClass_tName,var_literal0,var_tInnerPackage_tName);&#xD;&#xA;&#x9;eq3.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;eInnerClass&quot;, &quot;name&quot;, var_eInnerClass_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ClassInnerConstructor&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tInnerClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xD;&#xA;var_tInnerClass_ID.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;ID&quot;));&#xD;&#xA;var_tInnerClass_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tInnerPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_ID.setValue(__helper.getValue(&quot;tInnerPackage&quot;, &quot;ID&quot;));&#xD;&#xA;var_tInnerPackage_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eInnerClass&quot;, true, csp);&#xD;&#xA;var_eInnerClass_name.setValue(__helper.getValue(&quot;eInnerClass&quot;, &quot;name&quot;));&#xD;&#xA;var_eInnerClass_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xD;&#xA;var_tInnerClass_tName.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;tName&quot;));&#xD;&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass&quot;, true, csp);&#xD;&#xA;var_tOuterClass_tName.setValue(__helper.getValue(&quot;tOuterClass&quot;, &quot;tName&quot;));&#xD;&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;$1&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tInnerPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_tName.setValue(__helper.getValue(&quot;tInnerPackage&quot;, &quot;tName&quot;));&#xD;&#xA;var_tInnerPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;AddSuffix addSuffix3 = new AddSuffix();&#xD;&#xA;csp.getConstraints().add(addSuffix3);&#xA;&#xA;createID0.setRuleName(&quot;ClassInnerConstructor&quot;);&#xD;&#xA;createID0.solve(var_tInnerClass_ID);&#xA;&#xA;createID1.setRuleName(&quot;ClassInnerConstructor&quot;);&#xD;&#xA;createID1.solve(var_tInnerPackage_ID);&#xA;&#xA;eq2.setRuleName(&quot;ClassInnerConstructor&quot;);&#xD;&#xA;eq2.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xA;&#xA;addSuffix3.setRuleName(&quot;ClassInnerConstructor&quot;);&#xD;&#xA;addSuffix3.solve(var_tOuterClass_tName,var_literal0,var_tInnerPackage_tName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tInnerClass_ID.setBound(false);&#xD;&#xA;&#x9;var_tInnerPackage_ID.setBound(false);&#xD;&#xA;&#x9;var_tInnerClass_tName.setBound(false);&#xD;&#xA;&#x9;var_tInnerPackage_tName.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tInnerClass_ID);&#xD;&#xA;&#x9;createID1.solve(var_tInnerPackage_ID);&#xD;&#xA;&#x9;eq2.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xD;&#xA;&#x9;addSuffix3.solve(var_tOuterClass_tName,var_literal0,var_tInnerPackage_tName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tInnerClass&quot;, &quot;ID&quot;, var_tInnerClass_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tInnerPackage&quot;, &quot;ID&quot;, var_tInnerPackage_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tInnerClass&quot;, &quot;tName&quot;, var_tInnerClass_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tInnerPackage&quot;, &quot;tName&quot;, var_tInnerPackage_tName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ClassInnerConstructor&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tInnerClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xD;&#xA;var_tInnerClass_ID.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;ID&quot;));&#xD;&#xA;var_tInnerClass_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tInnerPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_ID.setValue(__helper.getValue(&quot;tInnerPackage&quot;, &quot;ID&quot;));&#xD;&#xA;var_tInnerPackage_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eInnerClass&quot;, true, csp);&#xD;&#xA;var_eInnerClass_name.setValue(__helper.getValue(&quot;eInnerClass&quot;, &quot;name&quot;));&#xD;&#xA;var_eInnerClass_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xD;&#xA;var_tInnerClass_tName.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;tName&quot;));&#xD;&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass&quot;, true, csp);&#xD;&#xA;var_tOuterClass_tName.setValue(__helper.getValue(&quot;tOuterClass&quot;, &quot;tName&quot;));&#xD;&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;$1&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tInnerPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_tName.setValue(__helper.getValue(&quot;tInnerPackage&quot;, &quot;tName&quot;));&#xD;&#xA;var_tInnerPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;AddSuffix addSuffix2 = new AddSuffix();&#xD;&#xA;csp.getConstraints().add(addSuffix2);&#xA;&#xA;Eq eq3 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq3);&#xA;&#xA;createID0.setRuleName(&quot;ClassInnerConstructor&quot;);&#xD;&#xA;createID0.solve(var_tInnerClass_ID);&#xA;&#xA;createID1.setRuleName(&quot;ClassInnerConstructor&quot;);&#xD;&#xA;createID1.solve(var_tInnerPackage_ID);&#xA;&#xA;addSuffix2.setRuleName(&quot;ClassInnerConstructor&quot;);&#xD;&#xA;addSuffix2.solve(var_tOuterClass_tName,var_literal0,var_tInnerPackage_tName);&#xA;&#xA;eq3.setRuleName(&quot;ClassInnerConstructor&quot;);&#xD;&#xA;eq3.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_eInnerClass_name.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tInnerClass_ID);&#xD;&#xA;&#x9;createID1.solve(var_tInnerPackage_ID);&#xD;&#xA;&#x9;addSuffix2.solve(var_tOuterClass_tName,var_literal0,var_tInnerPackage_tName);&#xD;&#xA;&#x9;eq3.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;eInnerClass&quot;, &quot;name&quot;, var_eInnerClass_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodInvocationTarget&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodInvocationTarget&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FieldName&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mFieldName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mFieldName&quot;, true, csp);&#xD;&#xA;var_mFieldName_mName.setValue(__helper.getValue(&quot;mFieldName&quot;, &quot;mName&quot;));&#xD;&#xA;var_mFieldName_mName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tField_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField&quot;, true, csp);&#xD;&#xA;var_tField_tName.setValue(__helper.getValue(&quot;tField&quot;, &quot;tName&quot;));&#xD;&#xA;var_tField_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tField_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField&quot;, true, csp);&#xD;&#xA;var_tField_ID.setValue(__helper.getValue(&quot;tField&quot;, &quot;ID&quot;));&#xD;&#xA;var_tField_ID.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;eq0.setRuleName(&quot;FieldName&quot;);&#xD;&#xA;eq0.solve(var_mFieldName_mName,var_tField_tName);&#xA;&#xA;createID1.setRuleName(&quot;FieldName&quot;);&#xD;&#xA;createID1.solve(var_tField_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tField_tName.setBound(false);&#xD;&#xA;&#x9;var_tField_ID.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_mFieldName_mName,var_tField_tName);&#xD;&#xA;&#x9;createID1.solve(var_tField_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tField&quot;, &quot;tName&quot;, var_tField_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tField&quot;, &quot;ID&quot;, var_tField_ID.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FieldName&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mFieldName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mFieldName&quot;, true, csp);&#xD;&#xA;var_mFieldName_mName.setValue(__helper.getValue(&quot;mFieldName&quot;, &quot;mName&quot;));&#xD;&#xA;var_mFieldName_mName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tField_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField&quot;, true, csp);&#xD;&#xA;var_tField_tName.setValue(__helper.getValue(&quot;tField&quot;, &quot;tName&quot;));&#xD;&#xA;var_tField_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tField_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField&quot;, true, csp);&#xD;&#xA;var_tField_ID.setValue(__helper.getValue(&quot;tField&quot;, &quot;ID&quot;));&#xD;&#xA;var_tField_ID.setType(&quot;int&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;createID0.setRuleName(&quot;FieldName&quot;);&#xD;&#xA;createID0.solve(var_tField_ID);&#xA;&#xA;eq1.setRuleName(&quot;FieldName&quot;);&#xD;&#xA;eq1.solve(var_mFieldName_mName,var_tField_tName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_mFieldName_mName.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tField_ID);&#xD;&#xA;&#x9;eq1.solve(var_mFieldName_mName,var_tField_tName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;mFieldName&quot;, &quot;mName&quot;, var_mFieldName_mName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FieldDefinition&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tFieldDefinition_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldDefinition&quot;, true, csp);&#xD;&#xA;var_tFieldDefinition_ID.setValue(__helper.getValue(&quot;tFieldDefinition&quot;, &quot;ID&quot;));&#xD;&#xA;var_tFieldDefinition_ID.setType(&quot;int&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;createID0.setRuleName(&quot;FieldDefinition&quot;);&#xD;&#xA;createID0.solve(var_tFieldDefinition_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tFieldDefinition_ID.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tFieldDefinition_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tFieldDefinition&quot;, &quot;ID&quot;, var_tFieldDefinition_ID.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FieldDefinition&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tFieldDefinition_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldDefinition&quot;, true, csp);&#xD;&#xA;var_tFieldDefinition_ID.setValue(__helper.getValue(&quot;tFieldDefinition&quot;, &quot;ID&quot;));&#xD;&#xA;var_tFieldDefinition_ID.setType(&quot;int&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;createID0.setRuleName(&quot;FieldDefinition&quot;);&#xD;&#xA;createID0.solve(var_tFieldDefinition_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;createID0.solve(var_tFieldDefinition_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;LinkDefinitionToClass&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;LinkDefinitionToClass&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Class&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(__helper.getValue(&quot;tType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;eq0.setRuleName(&quot;Class&quot;);&#xD;&#xA;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;createID1.setRuleName(&quot;Class&quot;);&#xD;&#xA;createID1.solve(var_tType_ID);&#xA;&#xA;eq2.setRuleName(&quot;Class&quot;);&#xD;&#xA;eq2.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tType_tName.setBound(false);&#xD;&#xA;&#x9;var_tType_ID.setBound(false);&#xD;&#xA;&#x9;var_tType_tLib.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_mType_name,var_tType_tName);&#xD;&#xA;&#x9;createID1.solve(var_tType_ID);&#xD;&#xA;&#x9;eq2.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tName&quot;, var_tType_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;ID&quot;, var_tType_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tLib&quot;, var_tType_tLib.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Class&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(__helper.getValue(&quot;tType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;createID0.setRuleName(&quot;Class&quot;);&#xD;&#xA;createID0.solve(var_tType_ID);&#xA;&#xA;eq1.setRuleName(&quot;Class&quot;);&#xD;&#xA;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#xA;eq2.setRuleName(&quot;Class&quot;);&#xD;&#xA;eq2.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_mType_name.setBound(false);&#xD;&#xA;&#x9;var_mType_proxy.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tType_ID);&#xD;&#xA;&#x9;eq1.solve(var_mType_name,var_tType_tName);&#xD;&#xA;&#x9;eq2.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;name&quot;, var_mType_name.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;proxy&quot;, var_mType_proxy.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FieldType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FieldType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NestedAnnotationType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(__helper.getValue(&quot;eOuterType&quot;, &quot;name&quot;));&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;$&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;AddSuffix addSuffix2 = new AddSuffix();&#xD;&#xA;csp.getConstraints().add(addSuffix2);&#xA;&#xA;CreateID createID3 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID3);&#xA;&#xA;Eq eq4 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq4);&#xA;&#xA;eq0.setRuleName(&quot;NestedAnnotationType&quot;);&#xD;&#xA;eq0.solve(var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;createID1.setRuleName(&quot;NestedAnnotationType&quot;);&#xD;&#xA;createID1.solve(var_tNestedType_ID);&#xA;&#xA;addSuffix2.setRuleName(&quot;NestedAnnotationType&quot;);&#xD;&#xA;addSuffix2.solve(var_eOuterType_name,var_literal0,var_tNestedPackage_tName);&#xA;&#xA;createID3.setRuleName(&quot;NestedAnnotationType&quot;);&#xD;&#xA;createID3.solve(var_tNestedPackage_ID);&#xA;&#xA;eq4.setRuleName(&quot;NestedAnnotationType&quot;);&#xD;&#xA;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tNestedType_tName.setBound(false);&#xD;&#xA;&#x9;var_tNestedType_ID.setBound(false);&#xD;&#xA;&#x9;var_tNestedPackage_tName.setBound(false);&#xD;&#xA;&#x9;var_tNestedPackage_ID.setBound(false);&#xD;&#xA;&#x9;var_tNestedType_tLib.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;&#x9;createID1.solve(var_tNestedType_ID);&#xD;&#xA;&#x9;addSuffix2.solve(var_eOuterType_name,var_literal0,var_tNestedPackage_tName);&#xD;&#xA;&#x9;createID3.solve(var_tNestedPackage_ID);&#xD;&#xA;&#x9;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tName&quot;, var_tNestedType_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;ID&quot;, var_tNestedType_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedPackage&quot;, &quot;tName&quot;, var_tNestedPackage_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedPackage&quot;, &quot;ID&quot;, var_tNestedPackage_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tLib&quot;, var_tNestedType_tLib.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NestedAnnotationType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(__helper.getValue(&quot;eOuterType&quot;, &quot;name&quot;));&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;$&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;AddSuffix addSuffix1 = new AddSuffix();&#xD;&#xA;csp.getConstraints().add(addSuffix1);&#xA;&#xA;CreateID createID2 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID2);&#xA;&#xA;Eq eq3 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq3);&#xA;&#xA;Eq eq4 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq4);&#xA;&#xA;createID0.setRuleName(&quot;NestedAnnotationType&quot;);&#xD;&#xA;createID0.solve(var_tNestedType_ID);&#xA;&#xA;addSuffix1.setRuleName(&quot;NestedAnnotationType&quot;);&#xD;&#xA;addSuffix1.solve(var_eOuterType_name,var_literal0,var_tNestedPackage_tName);&#xA;&#xA;createID2.setRuleName(&quot;NestedAnnotationType&quot;);&#xD;&#xA;createID2.solve(var_tNestedPackage_ID);&#xA;&#xA;eq3.setRuleName(&quot;NestedAnnotationType&quot;);&#xD;&#xA;eq3.solve(var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;eq4.setRuleName(&quot;NestedAnnotationType&quot;);&#xD;&#xA;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_eNestedType_name.setBound(false);&#xD;&#xA;&#x9;var_eNestedType_proxy.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tNestedType_ID);&#xD;&#xA;&#x9;addSuffix1.solve(var_eOuterType_name,var_literal0,var_tNestedPackage_tName);&#xD;&#xA;&#x9;createID2.solve(var_tNestedPackage_ID);&#xD;&#xA;&#x9;eq3.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;&#x9;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;name&quot;, var_eNestedType_name.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;proxy&quot;, var_eNestedType_proxy.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;AnnotationTypeWithValue&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(__helper.getValue(&quot;tType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationTypeWithValue&quot;);&#xD;&#xA;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;createID1.setRuleName(&quot;AnnotationTypeWithValue&quot;);&#xD;&#xA;createID1.solve(var_tType_ID);&#xA;&#xA;eq2.setRuleName(&quot;AnnotationTypeWithValue&quot;);&#xD;&#xA;eq2.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tType_tName.setBound(false);&#xD;&#xA;&#x9;var_tType_ID.setBound(false);&#xD;&#xA;&#x9;var_tType_tLib.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_mType_name,var_tType_tName);&#xD;&#xA;&#x9;createID1.solve(var_tType_ID);&#xD;&#xA;&#x9;eq2.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tName&quot;, var_tType_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;ID&quot;, var_tType_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tLib&quot;, var_tType_tLib.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;AnnotationTypeWithValue&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(__helper.getValue(&quot;tType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;createID0.setRuleName(&quot;AnnotationTypeWithValue&quot;);&#xD;&#xA;createID0.solve(var_tType_ID);&#xA;&#xA;eq1.setRuleName(&quot;AnnotationTypeWithValue&quot;);&#xD;&#xA;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#xA;eq2.setRuleName(&quot;AnnotationTypeWithValue&quot;);&#xD;&#xA;eq2.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_mType_name.setBound(false);&#xD;&#xA;&#x9;var_mType_proxy.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tType_ID);&#xD;&#xA;&#x9;eq1.solve(var_mType_name,var_tType_tName);&#xD;&#xA;&#x9;eq2.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;name&quot;, var_mType_name.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;proxy&quot;, var_mType_proxy.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsInt&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;int&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsInt&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;int&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;AnonymousClass&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tClass&quot;, &quot;tLib&quot;, false, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tClass&quot;, &quot;tName&quot;, &quot;Anonymous&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xD;&#xA;var_tClass_ID.setValue(__helper.getValue(&quot;tClass&quot;, &quot;ID&quot;));&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;createID0.setRuleName(&quot;AnonymousClass&quot;);&#xD;&#xA;createID0.solve(var_tClass_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tClass_ID.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tClass_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tClass&quot;, &quot;ID&quot;, var_tClass_ID.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;AnonymousClass&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tClass&quot;, &quot;tLib&quot;, false, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tClass&quot;, &quot;tName&quot;, &quot;Anonymous&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xD;&#xA;var_tClass_ID.setValue(__helper.getValue(&quot;tClass&quot;, &quot;ID&quot;));&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;createID0.setRuleName(&quot;AnonymousClass&quot;);&#xD;&#xA;createID0.solve(var_tClass_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;createID0.solve(var_tClass_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodParameterLinkFirst&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodParameterLinkFirst&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodSignature&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tParameterList_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tParameterList&quot;, true, csp);&#xD;&#xA;var_tParameterList_ID.setValue(__helper.getValue(&quot;tParameterList&quot;, &quot;ID&quot;));&#xD;&#xA;var_tParameterList_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tSignature_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature&quot;, true, csp);&#xD;&#xA;var_tSignature_ID.setValue(__helper.getValue(&quot;tSignature&quot;, &quot;ID&quot;));&#xD;&#xA;var_tSignature_ID.setType(&quot;int&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;createID0.setRuleName(&quot;MethodSignature&quot;);&#xD;&#xA;createID0.solve(var_tParameterList_ID);&#xA;&#xA;createID1.setRuleName(&quot;MethodSignature&quot;);&#xD;&#xA;createID1.solve(var_tSignature_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tParameterList_ID.setBound(false);&#xD;&#xA;&#x9;var_tSignature_ID.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tParameterList_ID);&#xD;&#xA;&#x9;createID1.solve(var_tSignature_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tParameterList&quot;, &quot;ID&quot;, var_tParameterList_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tSignature&quot;, &quot;ID&quot;, var_tSignature_ID.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodSignature&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tParameterList_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tParameterList&quot;, true, csp);&#xD;&#xA;var_tParameterList_ID.setValue(__helper.getValue(&quot;tParameterList&quot;, &quot;ID&quot;));&#xD;&#xA;var_tParameterList_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tSignature_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature&quot;, true, csp);&#xD;&#xA;var_tSignature_ID.setValue(__helper.getValue(&quot;tSignature&quot;, &quot;ID&quot;));&#xD;&#xA;var_tSignature_ID.setType(&quot;int&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;createID0.setRuleName(&quot;MethodSignature&quot;);&#xD;&#xA;createID0.solve(var_tParameterList_ID);&#xA;&#xA;createID1.setRuleName(&quot;MethodSignature&quot;);&#xD;&#xA;createID1.solve(var_tSignature_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;createID0.solve(var_tParameterList_ID);&#xD;&#xA;&#x9;createID1.solve(var_tSignature_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ArrayTypeToClass&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ArrayTypeToClass&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsBoolean&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;boolean&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsBoolean&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;boolean&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsChar&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;char&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsChar&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;char&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsByte&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;byte&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsByte&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;byte&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsShort&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;short&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsShort&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;short&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsLong&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;long&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsLong&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;long&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsFloat&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;float&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsFloat&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;float&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsDouble&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;double&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsDouble&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;double&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodDefinition&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tMethodDefinition_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodDefinition&quot;, true, csp);&#xD;&#xA;var_tMethodDefinition_ID.setValue(__helper.getValue(&quot;tMethodDefinition&quot;, &quot;ID&quot;));&#xD;&#xA;var_tMethodDefinition_ID.setType(&quot;int&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;createID0.setRuleName(&quot;MethodDefinition&quot;);&#xD;&#xA;createID0.solve(var_tMethodDefinition_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tMethodDefinition_ID.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tMethodDefinition_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tMethodDefinition&quot;, &quot;ID&quot;, var_tMethodDefinition_ID.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodDefinition&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tMethodDefinition_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodDefinition&quot;, true, csp);&#xD;&#xA;var_tMethodDefinition_ID.setValue(__helper.getValue(&quot;tMethodDefinition&quot;, &quot;ID&quot;));&#xD;&#xA;var_tMethodDefinition_ID.setType(&quot;int&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;createID0.setRuleName(&quot;MethodDefinition&quot;);&#xD;&#xA;createID0.solve(var_tMethodDefinition_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;createID0.solve(var_tMethodDefinition_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Annotatio&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;member&quot;, &quot;name&quot;, &quot;id&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;value&quot;, &quot;name&quot;, &quot;id&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;value&quot;, &quot;proxy&quot;, false, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_number_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;number&quot;, true, csp);&#xD;&#xA;var_number_tokenValue.setValue(__helper.getValue(&quot;number&quot;, &quot;tokenValue&quot;));&#xD;&#xA;var_number_tokenValue.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tAnnotation_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnnotation&quot;, true, csp);&#xD;&#xA;var_tAnnotation_ID.setValue(__helper.getValue(&quot;tAnnotation&quot;, &quot;ID&quot;));&#xD;&#xA;var_tAnnotation_ID.setType(&quot;int&quot;);&#xA;&#xA;StringToInt stringToInt0 = new StringToInt();&#xD;&#xA;csp.getConstraints().add(stringToInt0);&#xA;&#xA;stringToInt0.setRuleName(&quot;Annotatio&quot;);&#xD;&#xA;stringToInt0.solve(var_number_tokenValue,var_tAnnotation_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tAnnotation_ID.setBound(false);&#xD;&#xA;&#x9;stringToInt0.solve(var_number_tokenValue,var_tAnnotation_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tAnnotation&quot;, &quot;ID&quot;, var_tAnnotation_ID.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Annotatio&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;member&quot;, &quot;name&quot;, &quot;id&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;value&quot;, &quot;name&quot;, &quot;id&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;value&quot;, &quot;proxy&quot;, false, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_number_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;number&quot;, true, csp);&#xD;&#xA;var_number_tokenValue.setValue(__helper.getValue(&quot;number&quot;, &quot;tokenValue&quot;));&#xD;&#xA;var_number_tokenValue.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tAnnotation_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnnotation&quot;, true, csp);&#xD;&#xA;var_tAnnotation_ID.setValue(__helper.getValue(&quot;tAnnotation&quot;, &quot;ID&quot;));&#xD;&#xA;var_tAnnotation_ID.setType(&quot;int&quot;);&#xA;&#xA;StringToInt stringToInt0 = new StringToInt();&#xD;&#xA;csp.getConstraints().add(stringToInt0);&#xA;&#xA;stringToInt0.setRuleName(&quot;Annotatio&quot;);&#xD;&#xA;stringToInt0.solve(var_number_tokenValue,var_tAnnotation_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_number_tokenValue.setBound(false);&#xD;&#xA;&#x9;stringToInt0.solve(var_number_tokenValue,var_tAnnotation_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;number&quot;, &quot;tokenValue&quot;, var_number_tokenValue.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NestedEnum&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;%ENUM%&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(__helper.getValue(&quot;eOuterType&quot;, &quot;name&quot;));&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal1.setValue(&quot;$&quot;);&#xD;&#xA;var_literal1.setType(&quot;&quot;);&#xA;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;AddPrefix addPrefix0 = new AddPrefix();&#xD;&#xA;csp.getConstraints().add(addPrefix0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;AddSuffix addSuffix2 = new AddSuffix();&#xD;&#xA;csp.getConstraints().add(addSuffix2);&#xA;&#xA;CreateID createID3 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID3);&#xA;&#xA;Eq eq4 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq4);&#xA;&#xA;addPrefix0.setRuleName(&quot;NestedEnum&quot;);&#xD;&#xA;addPrefix0.solve(var_literal0,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;createID1.setRuleName(&quot;NestedEnum&quot;);&#xD;&#xA;createID1.solve(var_tNestedType_ID);&#xA;&#xA;addSuffix2.setRuleName(&quot;NestedEnum&quot;);&#xD;&#xA;addSuffix2.solve(var_eOuterType_name,var_literal1,var_tNestedPackage_tName);&#xA;&#xA;createID3.setRuleName(&quot;NestedEnum&quot;);&#xD;&#xA;createID3.solve(var_tNestedPackage_ID);&#xA;&#xA;eq4.setRuleName(&quot;NestedEnum&quot;);&#xD;&#xA;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tNestedType_tName.setBound(false);&#xD;&#xA;&#x9;var_tNestedType_ID.setBound(false);&#xD;&#xA;&#x9;var_tNestedPackage_tName.setBound(false);&#xD;&#xA;&#x9;var_tNestedPackage_ID.setBound(false);&#xD;&#xA;&#x9;var_tNestedType_tLib.setBound(false);&#xD;&#xA;&#x9;addPrefix0.solve(var_literal0,var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;&#x9;createID1.solve(var_tNestedType_ID);&#xD;&#xA;&#x9;addSuffix2.solve(var_eOuterType_name,var_literal1,var_tNestedPackage_tName);&#xD;&#xA;&#x9;createID3.solve(var_tNestedPackage_ID);&#xD;&#xA;&#x9;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tName&quot;, var_tNestedType_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;ID&quot;, var_tNestedType_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedPackage&quot;, &quot;tName&quot;, var_tNestedPackage_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedPackage&quot;, &quot;ID&quot;, var_tNestedPackage_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tLib&quot;, var_tNestedType_tLib.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NestedEnum&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;%ENUM%&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(__helper.getValue(&quot;eOuterType&quot;, &quot;name&quot;));&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal1.setValue(&quot;$&quot;);&#xD;&#xA;var_literal1.setType(&quot;&quot;);&#xA;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;tName&quot;));&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(__helper.getValue(&quot;tNestedPackage&quot;, &quot;ID&quot;));&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;AddSuffix addSuffix1 = new AddSuffix();&#xD;&#xA;csp.getConstraints().add(addSuffix1);&#xA;&#xA;CreateID createID2 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID2);&#xA;&#xA;AddPrefix addPrefix3 = new AddPrefix();&#xD;&#xA;csp.getConstraints().add(addPrefix3);&#xA;&#xA;Eq eq4 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq4);&#xA;&#xA;createID0.setRuleName(&quot;NestedEnum&quot;);&#xD;&#xA;createID0.solve(var_tNestedType_ID);&#xA;&#xA;addSuffix1.setRuleName(&quot;NestedEnum&quot;);&#xD;&#xA;addSuffix1.solve(var_eOuterType_name,var_literal1,var_tNestedPackage_tName);&#xA;&#xA;createID2.setRuleName(&quot;NestedEnum&quot;);&#xD;&#xA;createID2.solve(var_tNestedPackage_ID);&#xA;&#xA;addPrefix3.setRuleName(&quot;NestedEnum&quot;);&#xD;&#xA;addPrefix3.solve(var_literal0,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;eq4.setRuleName(&quot;NestedEnum&quot;);&#xD;&#xA;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_eNestedType_name.setBound(false);&#xD;&#xA;&#x9;var_eNestedType_proxy.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tNestedType_ID);&#xD;&#xA;&#x9;addSuffix1.solve(var_eOuterType_name,var_literal1,var_tNestedPackage_tName);&#xD;&#xA;&#x9;createID2.solve(var_tNestedPackage_ID);&#xD;&#xA;&#x9;addPrefix3.solve(var_literal0,var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;&#x9;eq4.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;name&quot;, var_eNestedType_name.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;proxy&quot;, var_eNestedType_proxy.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypesIsVoid&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;void&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;PrimitiveTypesIsVoid&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;void&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ReturnType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ReturnType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodParameterLink&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodParameterLink&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodName&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mName&quot;, true, csp);&#xD;&#xA;var_mName_mName.setValue(__helper.getValue(&quot;mName&quot;, &quot;mName&quot;));&#xD;&#xA;var_mName_mName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xD;&#xA;var_tName_tName.setValue(__helper.getValue(&quot;tName&quot;, &quot;tName&quot;));&#xD;&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tName_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xD;&#xA;var_tName_ID.setValue(__helper.getValue(&quot;tName&quot;, &quot;ID&quot;));&#xD;&#xA;var_tName_ID.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;eq0.setRuleName(&quot;MethodName&quot;);&#xD;&#xA;eq0.solve(var_mName_mName,var_tName_tName);&#xA;&#xA;createID1.setRuleName(&quot;MethodName&quot;);&#xD;&#xA;createID1.solve(var_tName_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tName_tName.setBound(false);&#xD;&#xA;&#x9;var_tName_ID.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_mName_mName,var_tName_tName);&#xD;&#xA;&#x9;createID1.solve(var_tName_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tName&quot;, &quot;tName&quot;, var_tName_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tName&quot;, &quot;ID&quot;, var_tName_ID.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodName&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mName&quot;, true, csp);&#xD;&#xA;var_mName_mName.setValue(__helper.getValue(&quot;mName&quot;, &quot;mName&quot;));&#xD;&#xA;var_mName_mName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xD;&#xA;var_tName_tName.setValue(__helper.getValue(&quot;tName&quot;, &quot;tName&quot;));&#xD;&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tName_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xD;&#xA;var_tName_ID.setValue(__helper.getValue(&quot;tName&quot;, &quot;ID&quot;));&#xD;&#xA;var_tName_ID.setType(&quot;int&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;createID0.setRuleName(&quot;MethodName&quot;);&#xD;&#xA;createID0.solve(var_tName_ID);&#xA;&#xA;eq1.setRuleName(&quot;MethodName&quot;);&#xD;&#xA;eq1.solve(var_mName_mName,var_tName_tName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_mName_mName.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tName_ID);&#xD;&#xA;&#x9;eq1.solve(var_mName_mName,var_tName_tName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;mName&quot;, &quot;mName&quot;, var_mName_mName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;LinkSignatureToType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;LinkSignatureToType&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodParameter&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodParameter&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FieldAccessTarget&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FieldAccessTarget&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Enum&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;%ENUM%&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(__helper.getValue(&quot;tType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;AddPrefix addPrefix0 = new AddPrefix();&#xD;&#xA;csp.getConstraints().add(addPrefix0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;addPrefix0.setRuleName(&quot;Enum&quot;);&#xD;&#xA;addPrefix0.solve(var_literal0,var_mType_name,var_tType_tName);&#xA;&#xA;createID1.setRuleName(&quot;Enum&quot;);&#xD;&#xA;createID1.solve(var_tType_ID);&#xA;&#xA;eq2.setRuleName(&quot;Enum&quot;);&#xD;&#xA;eq2.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tType_tName.setBound(false);&#xD;&#xA;&#x9;var_tType_ID.setBound(false);&#xD;&#xA;&#x9;var_tType_tLib.setBound(false);&#xD;&#xA;&#x9;addPrefix0.solve(var_literal0,var_mType_name,var_tType_tName);&#xD;&#xA;&#x9;createID1.solve(var_tType_ID);&#xD;&#xA;&#x9;eq2.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tName&quot;, var_tType_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;ID&quot;, var_tType_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tLib&quot;, var_tType_tLib.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Enum&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;%ENUM%&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(__helper.getValue(&quot;tType&quot;, &quot;ID&quot;));&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xD;&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;AddPrefix addPrefix1 = new AddPrefix();&#xD;&#xA;csp.getConstraints().add(addPrefix1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;createID0.setRuleName(&quot;Enum&quot;);&#xD;&#xA;createID0.solve(var_tType_ID);&#xA;&#xA;addPrefix1.setRuleName(&quot;Enum&quot;);&#xD;&#xA;addPrefix1.solve(var_literal0,var_mType_name,var_tType_tName);&#xA;&#xA;eq2.setRuleName(&quot;Enum&quot;);&#xD;&#xA;eq2.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_mType_name.setBound(false);&#xD;&#xA;&#x9;var_mType_proxy.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tType_ID);&#xD;&#xA;&#x9;addPrefix1.solve(var_literal0,var_mType_name,var_tType_tName);&#xD;&#xA;&#x9;eq2.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;name&quot;, var_mType_name.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;proxy&quot;, var_mType_proxy.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodInvocationSource&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MethodInvocationSource&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SuperMethodInvocationSource&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SuperMethodInvocationSource&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ConstructorInvocationSource&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ConstructorInvocationSource&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SuperConstructorInvocationSource&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SuperConstructorInvocationSource&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;TypeParameter&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tClass&quot;, &quot;tLib&quot;, false, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tClass&quot;, &quot;tName&quot;, &quot;T&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xD;&#xA;var_tClass_ID.setValue(__helper.getValue(&quot;tClass&quot;, &quot;ID&quot;));&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;createID0.setRuleName(&quot;TypeParameter&quot;);&#xD;&#xA;createID0.solve(var_tClass_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tClass_ID.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tClass_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tClass&quot;, &quot;ID&quot;, var_tClass_ID.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;TypeParameter&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tClass&quot;, &quot;tLib&quot;, false, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tClass&quot;, &quot;tName&quot;, &quot;T&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xD;&#xA;var_tClass_ID.setValue(__helper.getValue(&quot;tClass&quot;, &quot;ID&quot;));&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;createID0.setRuleName(&quot;TypeParameter&quot;);&#xD;&#xA;createID0.solve(var_tClass_ID);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;createID0.solve(var_tClass_ID);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Constructor&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tName_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xD;&#xA;var_tName_ID.setValue(__helper.getValue(&quot;tName&quot;, &quot;ID&quot;));&#xD;&#xA;var_tName_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tSig_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSig&quot;, true, csp);&#xD;&#xA;var_tSig_ID.setValue(__helper.getValue(&quot;tSig&quot;, &quot;ID&quot;));&#xD;&#xA;var_tSig_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tConstructorDef_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tConstructorDef&quot;, true, csp);&#xD;&#xA;var_tConstructorDef_ID.setValue(__helper.getValue(&quot;tConstructorDef&quot;, &quot;ID&quot;));&#xD;&#xA;var_tConstructorDef_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eConstructorDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eConstructorDeclaration&quot;, true, csp);&#xD;&#xA;var_eConstructorDeclaration_name.setValue(__helper.getValue(&quot;eConstructorDeclaration&quot;, &quot;name&quot;));&#xD;&#xA;var_eConstructorDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xD;&#xA;var_tName_tName.setValue(__helper.getValue(&quot;tName&quot;, &quot;tName&quot;));&#xD;&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;CreateID createID2 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID2);&#xA;&#xA;Eq eq3 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq3);&#xA;&#xA;createID0.setRuleName(&quot;Constructor&quot;);&#xD;&#xA;createID0.solve(var_tName_ID);&#xA;&#xA;createID1.setRuleName(&quot;Constructor&quot;);&#xD;&#xA;createID1.solve(var_tSig_ID);&#xA;&#xA;createID2.setRuleName(&quot;Constructor&quot;);&#xD;&#xA;createID2.solve(var_tConstructorDef_ID);&#xA;&#xA;eq3.setRuleName(&quot;Constructor&quot;);&#xD;&#xA;eq3.solve(var_eConstructorDeclaration_name,var_tName_tName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tName_ID.setBound(false);&#xD;&#xA;&#x9;var_tSig_ID.setBound(false);&#xD;&#xA;&#x9;var_tConstructorDef_ID.setBound(false);&#xD;&#xA;&#x9;var_tName_tName.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tName_ID);&#xD;&#xA;&#x9;createID1.solve(var_tSig_ID);&#xD;&#xA;&#x9;createID2.solve(var_tConstructorDef_ID);&#xD;&#xA;&#x9;eq3.solve(var_eConstructorDeclaration_name,var_tName_tName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tName&quot;, &quot;ID&quot;, var_tName_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tSig&quot;, &quot;ID&quot;, var_tSig_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tConstructorDef&quot;, &quot;ID&quot;, var_tConstructorDef_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tName&quot;, &quot;tName&quot;, var_tName_tName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Constructor&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tName_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xD;&#xA;var_tName_ID.setValue(__helper.getValue(&quot;tName&quot;, &quot;ID&quot;));&#xD;&#xA;var_tName_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tSig_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSig&quot;, true, csp);&#xD;&#xA;var_tSig_ID.setValue(__helper.getValue(&quot;tSig&quot;, &quot;ID&quot;));&#xD;&#xA;var_tSig_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tConstructorDef_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tConstructorDef&quot;, true, csp);&#xD;&#xA;var_tConstructorDef_ID.setValue(__helper.getValue(&quot;tConstructorDef&quot;, &quot;ID&quot;));&#xD;&#xA;var_tConstructorDef_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eConstructorDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eConstructorDeclaration&quot;, true, csp);&#xD;&#xA;var_eConstructorDeclaration_name.setValue(__helper.getValue(&quot;eConstructorDeclaration&quot;, &quot;name&quot;));&#xD;&#xA;var_eConstructorDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xD;&#xA;var_tName_tName.setValue(__helper.getValue(&quot;tName&quot;, &quot;tName&quot;));&#xD;&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;CreateID createID1 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID1);&#xA;&#xA;CreateID createID2 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID2);&#xA;&#xA;Eq eq3 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq3);&#xA;&#xA;createID0.setRuleName(&quot;Constructor&quot;);&#xD;&#xA;createID0.solve(var_tName_ID);&#xA;&#xA;createID1.setRuleName(&quot;Constructor&quot;);&#xD;&#xA;createID1.solve(var_tSig_ID);&#xA;&#xA;createID2.setRuleName(&quot;Constructor&quot;);&#xD;&#xA;createID2.solve(var_tConstructorDef_ID);&#xA;&#xA;eq3.setRuleName(&quot;Constructor&quot;);&#xD;&#xA;eq3.solve(var_eConstructorDeclaration_name,var_tName_tName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_eConstructorDeclaration_name.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tName_ID);&#xD;&#xA;&#x9;createID1.solve(var_tSig_ID);&#xD;&#xA;&#x9;createID2.solve(var_tConstructorDef_ID);&#xD;&#xA;&#x9;eq3.solve(var_eConstructorDeclaration_name,var_tName_tName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;eConstructorDeclaration&quot;, &quot;name&quot;, var_eConstructorDeclaration_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;UnresolvedTypeDeclaration&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xD;&#xA;var_tClass_ID.setValue(__helper.getValue(&quot;tClass&quot;, &quot;ID&quot;));&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eAnonymousClassDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eAnonymousClassDeclaration&quot;, true, csp);&#xD;&#xA;var_eAnonymousClassDeclaration_name.setValue(__helper.getValue(&quot;eAnonymousClassDeclaration&quot;, &quot;name&quot;));&#xD;&#xA;var_eAnonymousClassDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xD;&#xA;var_tClass_tName.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tName&quot;));&#xD;&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_eAnonymousClassDeclaration_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eAnonymousClassDeclaration&quot;, true, csp);&#xD;&#xA;var_eAnonymousClassDeclaration_proxy.setValue(__helper.getValue(&quot;eAnonymousClassDeclaration&quot;, &quot;proxy&quot;));&#xD;&#xA;var_eAnonymousClassDeclaration_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xD;&#xA;var_tClass_tLib.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tClass_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;createID0.setRuleName(&quot;UnresolvedTypeDeclaration&quot;);&#xD;&#xA;createID0.solve(var_tClass_ID);&#xA;&#xA;eq1.setRuleName(&quot;UnresolvedTypeDeclaration&quot;);&#xD;&#xA;eq1.solve(var_eAnonymousClassDeclaration_name,var_tClass_tName);&#xA;&#xA;eq2.setRuleName(&quot;UnresolvedTypeDeclaration&quot;);&#xD;&#xA;eq2.solve(var_eAnonymousClassDeclaration_proxy,var_tClass_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_tClass_ID.setBound(false);&#xD;&#xA;&#x9;var_tClass_tName.setBound(false);&#xD;&#xA;&#x9;var_tClass_tLib.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tClass_ID);&#xD;&#xA;&#x9;eq1.solve(var_eAnonymousClassDeclaration_name,var_tClass_tName);&#xD;&#xA;&#x9;eq2.solve(var_eAnonymousClassDeclaration_proxy,var_tClass_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tClass&quot;, &quot;ID&quot;, var_tClass_ID.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tClass&quot;, &quot;tName&quot;, var_tClass_tName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;tClass&quot;, &quot;tLib&quot;, var_tClass_tLib.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;UnresolvedTypeDeclaration&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xD;&#xA;var_tClass_ID.setValue(__helper.getValue(&quot;tClass&quot;, &quot;ID&quot;));&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xA;&#xA;Variable var_eAnonymousClassDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eAnonymousClassDeclaration&quot;, true, csp);&#xD;&#xA;var_eAnonymousClassDeclaration_name.setValue(__helper.getValue(&quot;eAnonymousClassDeclaration&quot;, &quot;name&quot;));&#xD;&#xA;var_eAnonymousClassDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xD;&#xA;var_tClass_tName.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tName&quot;));&#xD;&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_eAnonymousClassDeclaration_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eAnonymousClassDeclaration&quot;, true, csp);&#xD;&#xA;var_eAnonymousClassDeclaration_proxy.setValue(__helper.getValue(&quot;eAnonymousClassDeclaration&quot;, &quot;proxy&quot;));&#xD;&#xA;var_eAnonymousClassDeclaration_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xD;&#xA;var_tClass_tLib.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tLib&quot;));&#xD;&#xA;var_tClass_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;CreateID createID0 = new CreateID();&#xD;&#xA;csp.getConstraints().add(createID0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;createID0.setRuleName(&quot;UnresolvedTypeDeclaration&quot;);&#xD;&#xA;createID0.solve(var_tClass_ID);&#xA;&#xA;eq1.setRuleName(&quot;UnresolvedTypeDeclaration&quot;);&#xD;&#xA;eq1.solve(var_eAnonymousClassDeclaration_name,var_tClass_tName);&#xA;&#xA;eq2.setRuleName(&quot;UnresolvedTypeDeclaration&quot;);&#xD;&#xA;eq2.solve(var_eAnonymousClassDeclaration_proxy,var_tClass_tLib);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_eAnonymousClassDeclaration_name.setBound(false);&#xD;&#xA;&#x9;var_eAnonymousClassDeclaration_proxy.setBound(false);&#xD;&#xA;&#x9;createID0.solve(var_tClass_ID);&#xD;&#xA;&#x9;eq1.solve(var_eAnonymousClassDeclaration_name,var_tClass_tName);&#xD;&#xA;&#x9;eq2.solve(var_eAnonymousClassDeclaration_proxy,var_tClass_tLib);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;eAnonymousClassDeclaration&quot;, &quot;name&quot;, var_eAnonymousClassDeclaration_name.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;eAnonymousClassDeclaration&quot;, &quot;proxy&quot;, var_eAnonymousClassDeclaration_proxy.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;compilationUnit&quot;,compilationUnit);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModel.name&quot;, true, csp);&#xD;&#xA;var_mModel_name.setValue(mModel.getName());&#xD;&#xA;var_mModel_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tPG_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPG.tName&quot;, true, csp);&#xD;&#xA;var_tPG_tName.setValue(tPG.getTName());&#xD;&#xA;var_tPG_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mModel_name,var_tPG_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPG&quot;,tPG);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage.name&quot;, true, csp);&#xD;&#xA;var_mPackage_name.setValue(mPackage.getName());&#xD;&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPackage.tName&quot;, true, csp);&#xD;&#xA;var_tPackage_tName.setValue(tPackage.getTName());&#xD;&#xA;var_tPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mPackage_name,var_tPackage_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage.name&quot;, true, csp);&#xD;&#xA;var_mPackage_name.setValue(mPackage.getName());&#xD;&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tSub_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSub.tName&quot;, true, csp);&#xD;&#xA;var_tSub_tName.setValue(tSub.getTName());&#xD;&#xA;var_tSub_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mPackage_name,var_tSub_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParent&quot;,tParent);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSub&quot;,tSub);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mParentPackage&quot;,mParentPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mParentPackageToTParent&quot;,mParentPackageToTParent);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(tNestedType.getID());&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(tNestedPackage.getTName());&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(tNestedPackage.getID());&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal0,var_tNestedPackage_tName);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eNestedType&quot;,eNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedPackage&quot;,tNestedPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eParameterizedType&quot;,eParameterizedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eType&quot;,eType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeToTAbstractType&quot;,eTypeToTAbstractType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(tNestedType.getID());&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(tNestedPackage.getTName());&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(tNestedPackage.getID());&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal0,var_tNestedPackage_tName);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eNestedType&quot;,eNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedPackage&quot;,tNestedPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(mType.getName());&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(tType.getTName());&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(tType.getID());&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(mType.isProxy());&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(tType.isTLib());&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tSignature_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.ID&quot;, true, csp);&#xD;&#xA;var_tSignature_ID.setValue(tSignature.getID());&#xD;&#xA;var_tSignature_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tSignature_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mFieldName&quot;,mFieldName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eFieldDeclarationToTField&quot;,eFieldDeclarationToTField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignatureToTParameterList&quot;,mMethodSignatureToTParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTAbstractType&quot;,mTypeToTAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignature&quot;,mMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(mType.getName());&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(tType.getTName());&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(tType.getID());&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(mType.isProxy());&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(tType.isTLib());&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mAccess&quot;,mAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tInterface&quot;,tInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eInterfaceDeclaration&quot;,eInterfaceDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eInterfaceDeclarationToTInterface&quot;,eInterfaceDeclarationToTInterface);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eExtendedClass&quot;,eExtendedClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tExtendedClass&quot;,tExtendedClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eExtendedClassToTExtendedClass&quot;,eExtendedClassToTExtendedClass);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$1&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tInnerClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.ID&quot;, true, csp);&#xD;&#xA;var_tInnerClass_ID.setValue(tInnerClass.getID());&#xD;&#xA;var_tInnerClass_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tInnerPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.ID&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_ID.setValue(tInnerPackage.getID());&#xD;&#xA;var_tInnerPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eInnerClass.name&quot;, true, csp);&#xD;&#xA;var_eInnerClass_name.setValue(eInnerClass.getName());&#xD;&#xA;var_eInnerClass_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, true, csp);&#xD;&#xA;var_tInnerClass_tName.setValue(tInnerClass.getTName());&#xD;&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xD;&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xD;&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tInnerPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.tName&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_tName.setValue(tInnerPackage.getTName());&#xD;&#xA;var_tInnerPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tInnerClass_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tInnerPackage_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_tOuterClass_tName,literal0,var_tInnerPackage_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tInnerClass&quot;,tInnerClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tInnerPackage&quot;,tInnerPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eInnerClass&quot;,eInnerClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eCodeBlock&quot;,eCodeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeDeclarationStatement&quot;,typeDeclarationStatement);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eMethodDeclaration&quot;,eMethodDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$1&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tInnerClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.ID&quot;, true, csp);&#xD;&#xA;var_tInnerClass_ID.setValue(tInnerClass.getID());&#xD;&#xA;var_tInnerClass_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tInnerPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.ID&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_ID.setValue(tInnerPackage.getID());&#xD;&#xA;var_tInnerPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eInnerClass.name&quot;, true, csp);&#xD;&#xA;var_eInnerClass_name.setValue(eInnerClass.getName());&#xD;&#xA;var_eInnerClass_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, true, csp);&#xD;&#xA;var_tInnerClass_tName.setValue(tInnerClass.getTName());&#xD;&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xD;&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xD;&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tInnerPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.tName&quot;, true, csp);&#xD;&#xA;var_tInnerPackage_tName.setValue(tInnerPackage.getTName());&#xD;&#xA;var_tInnerPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tInnerClass_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tInnerPackage_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_tOuterClass_tName,literal0,var_tInnerPackage_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eConstructorDeclaration&quot;,eConstructorDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeDeclarationStatement&quot;,typeDeclarationStatement);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eCodeBlock&quot;,eCodeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eInnerClass&quot;,eInnerClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tInnerPackage&quot;,tInnerPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tInnerClass&quot;,tInnerClass);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethod&quot;,tMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethod&quot;,mMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationToTAccess&quot;,invocationToTAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTDefinition&quot;,mDefinitionToTDefinition);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mFieldName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mFieldName.mName&quot;, true, csp);&#xD;&#xA;var_mFieldName_mName.setValue(mFieldName.getMName());&#xD;&#xA;var_mFieldName_mName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tField_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField.tName&quot;, true, csp);&#xD;&#xA;var_tField_tName.setValue(tField.getTName());&#xD;&#xA;var_tField_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tField_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField.ID&quot;, true, csp);&#xD;&#xA;var_tField_ID.setValue(tField.getID());&#xD;&#xA;var_tField_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mFieldName_mName,var_tField_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tField_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mFieldName&quot;,mFieldName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;modelToTypeGraph&quot;,modelToTypeGraph);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tFieldDefinition_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldDefinition.ID&quot;, true, csp);&#xD;&#xA;var_tFieldDefinition_ID.setValue(tFieldDefinition.getID());&#xD;&#xA;var_tFieldDefinition_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tFieldDefinition_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eFieldDeclaration&quot;,eFieldDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTFieldSignature&quot;,mSignatureToTFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mName&quot;,mName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tFieldDefinition&quot;,tFieldDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tFieldSignature&quot;,tFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mNameToTField&quot;,mNameToTField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varDeclFragment&quot;,varDeclFragment);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTDefinition&quot;,mDefinitionToTDefinition);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(mType.getName());&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(tType.getTName());&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(tType.getID());&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(mType.isProxy());&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(tType.isTLib());&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tFieldSignature&quot;,tFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiv&quot;,tPrimitiv);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveTypeToTPrimitiv&quot;,ePrimitiveTypeToTPrimitiv);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTFieldSignature&quot;,mSignatureToTFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(tNestedType.getID());&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(tNestedPackage.getTName());&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(tNestedPackage.getID());&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal0,var_tNestedPackage_tName);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eNestedType&quot;,eNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedPackage&quot;,tNestedPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(mType.getName());&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(tType.getTName());&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(tType.getID());&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(mType.isProxy());&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(tType.isTLib());&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;access&quot;,access);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAType&quot;,tAType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;member&quot;,member);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeToTAType&quot;,typeToTAType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.ID&quot;, true, csp);&#xD;&#xA;var_tClass_ID.setValue(tClass.getID());&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tClass_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mmethodSignature&quot;,mmethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;,eSingleVariableDeclarationToTParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;,mmethodSignatureToTMethodSignature);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tParameterList_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tParameterList.ID&quot;, true, csp);&#xD;&#xA;var_tParameterList_ID.setValue(tParameterList.getID());&#xD;&#xA;var_tParameterList_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tSignature_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.ID&quot;, true, csp);&#xD;&#xA;var_tSignature_ID.setValue(tSignature.getID());&#xD;&#xA;var_tSignature_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tParameterList_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tSignature_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mName&quot;,mName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mNameToTName&quot;,mNameToTName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eType&quot;,eType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeToTArrayClass&quot;,eTypeToTArrayClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eArrayType&quot;,eArrayType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tArrayClass&quot;,tArrayClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tMethodDefinition_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodDefinition.ID&quot;, true, csp);&#xD;&#xA;var_tMethodDefinition_ID.setValue(tMethodDefinition.getID());&#xD;&#xA;var_tMethodDefinition_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tMethodDefinition_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethodSignature&quot;,tMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTMethodSignature&quot;,mSignatureToTMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethod&quot;,tMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eMethodDeclaration&quot;,eMethodDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethodDefinition&quot;,tMethodDefinition);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_number_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;number.tokenValue&quot;, true, csp);&#xD;&#xA;var_number_tokenValue.setValue(number.getTokenValue());&#xD;&#xA;var_number_tokenValue.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tAnnotation_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnnotation.ID&quot;, true, csp);&#xD;&#xA;var_tAnnotation_ID.setValue(tAnnotation.getID());&#xD;&#xA;var_tAnnotation_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;StringToInt stringToInt = new StringToInt();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(stringToInt);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;stringToInt.setRuleName(&quot;&quot;);&#xD;&#xA;stringToInt.solve(var_number_tokenValue,var_tAnnotation_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;number&quot;,number);&#xD;&#xA;isApplicableMatch.registerObject(&quot;member&quot;,member);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAnnotationType&quot;,tAnnotationType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mAnnotationTypeToTAnnotationType&quot;,mAnnotationTypeToTAnnotationType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mBody&quot;,mBody);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAnnotable&quot;,tAnnotable);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mBodyToTAnnotable&quot;,mBodyToTAnnotable);&#xD;&#xA;isApplicableMatch.registerObject(&quot;value&quot;,value);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mAccess&quot;,mAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mAnnotationType&quot;,mAnnotationType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;%ENUM%&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;$&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xD;&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xD;&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, true, csp);&#xD;&#xA;var_tNestedType_ID.setValue(tNestedType.getID());&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_tName.setValue(tNestedPackage.getTName());&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, true, csp);&#xD;&#xA;var_tNestedPackage_ID.setValue(tNestedPackage.getID());&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xD;&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xD;&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;&quot;);&#xD;&#xA;addPrefix.solve(literal0,var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal1,var_tNestedPackage_tName);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eNestedType&quot;,eNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedPackage&quot;,tNestedPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eReturnType&quot;,eReturnType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethodDefinition&quot;,tMethodDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eReturnTypeToTAbstractType&quot;,eReturnTypeToTAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eMethodDeclarationToTMethodDefinition&quot;,eMethodDeclarationToTMethodDefinition);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPrevEntry&quot;,mPrevEntry);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;,mmethodSignatureToTMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrevParameter&quot;,tPrevParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;,eSingleVariableDeclarationToTParameter);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mName.mName&quot;, true, csp);&#xD;&#xA;var_mName_mName.setValue(mName.getMName());&#xD;&#xA;var_mName_mName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, true, csp);&#xD;&#xA;var_tName_tName.setValue(tName.getTName());&#xD;&#xA;var_tName_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tName_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.ID&quot;, true, csp);&#xD;&#xA;var_tName_ID.setValue(tName.getID());&#xD;&#xA;var_tName_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mName_mName,var_tName_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tName_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;modelToPg&quot;,modelToPg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mName&quot;,mName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignatureToTParameterList&quot;,mMethodSignatureToTParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignature&quot;,mMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTDefinition&quot;,mDefinitionToTDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mField&quot;,mField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varAccess&quot;,varAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varDeclFrag&quot;,varDeclFrag);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varDeclFragToTField&quot;,varDeclFragToTField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varAccessToTAccess&quot;,varAccessToTAccess);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;%ENUM%&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xD;&#xA;var_mType_name.setValue(mType.getName());&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xD;&#xA;var_tType_tName.setValue(tType.getTName());&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, true, csp);&#xD;&#xA;var_tType_ID.setValue(tType.getID());&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xD;&#xA;var_mType_proxy.setValue(mType.isProxy());&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xD;&#xA;var_tType_tLib.setValue(tType.isTLib());&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;&quot;);&#xD;&#xA;addPrefix.solve(literal0,var_mType_name,var_tType_tName);&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.ID&quot;, true, csp);&#xD;&#xA;var_tClass_ID.setValue(tClass.getID());&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tClass_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tName_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.ID&quot;, true, csp);&#xD;&#xA;var_tName_ID.setValue(tName.getID());&#xD;&#xA;var_tName_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tSig_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSig.ID&quot;, true, csp);&#xD;&#xA;var_tSig_ID.setValue(tSig.getID());&#xD;&#xA;var_tSig_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tConstructorDef_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tConstructorDef.ID&quot;, true, csp);&#xD;&#xA;var_tConstructorDef_ID.setValue(tConstructorDef.getID());&#xD;&#xA;var_tConstructorDef_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eConstructorDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eConstructorDeclaration.name&quot;, true, csp);&#xD;&#xA;var_eConstructorDeclaration_name.setValue(eConstructorDeclaration.getName());&#xD;&#xA;var_eConstructorDeclaration_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, true, csp);&#xD;&#xA;var_tName_tName.setValue(tName.getTName());&#xD;&#xA;var_tName_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;CreateID createID_1 = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(createID_1);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tName_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tSig_ID);&#xD;&#xA;createID_1.setRuleName(&quot;&quot;);&#xD;&#xA;createID_1.solve(var_tConstructorDef_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eConstructorDeclaration_name,var_tName_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eConstructorDeclaration&quot;,eConstructorDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tConstructorDef&quot;,tConstructorDef);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSig&quot;,tSig);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.ID&quot;, true, csp);&#xD;&#xA;var_tClass_ID.setValue(tClass.getID());&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eAnonymousClassDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eAnonymousClassDeclaration.name&quot;, true, csp);&#xD;&#xA;var_eAnonymousClassDeclaration_name.setValue(eAnonymousClassDeclaration.getName());&#xD;&#xA;var_eAnonymousClassDeclaration_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xD;&#xA;var_tClass_tName.setValue(tClass.getTName());&#xD;&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eAnonymousClassDeclaration_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eAnonymousClassDeclaration.proxy&quot;, true, csp);&#xD;&#xA;var_eAnonymousClassDeclaration_proxy.setValue(eAnonymousClassDeclaration.isProxy());&#xD;&#xA;var_eAnonymousClassDeclaration_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tLib&quot;, true, csp);&#xD;&#xA;var_tClass_tLib.setValue(tClass.isTLib());&#xD;&#xA;var_tClass_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tClass_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eAnonymousClassDeclaration_name,var_tClass_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eAnonymousClassDeclaration_proxy,var_tClass_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/CompilationUnit/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModel.name&quot;, csp);&#xD;&#xA;var_mModel_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tPG_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPG.tName&quot;, csp);&#xD;&#xA;var_tPG_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mModel_name,var_tPG_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ModelToPg/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage.name&quot;, csp);&#xD;&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPackage.tName&quot;, csp);&#xD;&#xA;var_tPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mPackage_name,var_tPackage_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PackageToPGPackage/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage.name&quot;, csp);&#xD;&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tSub_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSub.tName&quot;, csp);&#xD;&#xA;var_tSub_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mPackage_name,var_tSub_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParent&quot;,tParent);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mParentPackage&quot;,mParentPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mParentPackageToTParent&quot;,mParentPackageToTParent);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SubPackageToPGPackage/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, csp);&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, csp);&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, csp);&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal0,var_tNestedPackage_tName);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedInterfaceInType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eType&quot;,eType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeToTAbstractType&quot;,eTypeToTAbstractType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ParameterizedTypeToClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, csp);&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, csp);&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, csp);&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal0,var_tNestedPackage_tName);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedClassInType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SignatureReturnType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, csp);&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Interface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tSignature_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.ID&quot;, csp);&#xD;&#xA;var_tSignature_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tSignature_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mFieldName&quot;,mFieldName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eFieldDeclarationToTField&quot;,eFieldDeclarationToTField);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldSignature/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignatureToTParameterList&quot;,mMethodSignatureToTParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTAbstractType&quot;,mTypeToTAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignature&quot;,mMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, csp);&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessSource/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tInterface&quot;,tInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eInterfaceDeclaration&quot;,eInterfaceDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eInterfaceDeclarationToTInterface&quot;,eInterfaceDeclarationToTInterface);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/InterfaceExtendsInterface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eExtendedClass&quot;,eExtendedClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tExtendedClass&quot;,tExtendedClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eExtendedClassToTExtendedClass&quot;,eExtendedClassToTExtendedClass);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassExtendsClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassImplementsInterface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$1&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xD;&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xD;&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tInnerClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.ID&quot;, csp);&#xD;&#xA;var_tInnerClass_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tInnerPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.ID&quot;, csp);&#xD;&#xA;var_tInnerPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eInnerClass.name&quot;, csp);&#xD;&#xA;var_eInnerClass_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, csp);&#xD;&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tInnerPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.tName&quot;, csp);&#xD;&#xA;var_tInnerPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tInnerClass_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tInnerPackage_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_tOuterClass_tName,literal0,var_tInnerPackage_tName);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eCodeBlock&quot;,eCodeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eMethodDeclaration&quot;,eMethodDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerMethode/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$1&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xD;&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xD;&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tInnerClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.ID&quot;, csp);&#xD;&#xA;var_tInnerClass_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tInnerPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.ID&quot;, csp);&#xD;&#xA;var_tInnerPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eInnerClass.name&quot;, csp);&#xD;&#xA;var_eInnerClass_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, csp);&#xD;&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tInnerPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerPackage.tName&quot;, csp);&#xD;&#xA;var_tInnerPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tInnerClass_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tInnerPackage_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_tOuterClass_tName,literal0,var_tInnerPackage_tName);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eInnerClass_name,var_tInnerClass_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eConstructorDeclaration&quot;,eConstructorDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eCodeBlock&quot;,eCodeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ClassInnerConstructor/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethod&quot;,tMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethod&quot;,mMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationToTAccess&quot;,invocationToTAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTDefinition&quot;,mDefinitionToTDefinition);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationTarget/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mFieldName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mFieldName.mName&quot;, csp);&#xD;&#xA;var_mFieldName_mName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tField_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField.tName&quot;, csp);&#xD;&#xA;var_tField_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tField_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField.ID&quot;, csp);&#xD;&#xA;var_tField_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tField_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mFieldName_mName,var_tField_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;modelToTypeGraph&quot;,modelToTypeGraph);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldName/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tFieldDefinition_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldDefinition.ID&quot;, csp);&#xD;&#xA;var_tFieldDefinition_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tFieldDefinition_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTFieldSignature&quot;,mSignatureToTFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mName&quot;,mName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tFieldSignature&quot;,tFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mNameToTField&quot;,mNameToTField);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldDefinition/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTDefinition&quot;,mDefinitionToTDefinition);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkDefinitionToClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, csp);&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Class/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tFieldSignature&quot;,tFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrimitiv&quot;,tPrimitiv);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveTypeToTPrimitiv&quot;,ePrimitiveTypeToTPrimitiv);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTFieldSignature&quot;,mSignatureToTFieldSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;$&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, csp);&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, csp);&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, csp);&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal0,var_tNestedPackage_tName);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedAnnotationType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, csp);&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_name,var_tType_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAType&quot;,tAType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeToTAType&quot;,typeToTAType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnnotationTypeWithValue/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsInt/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.ID&quot;, csp);&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tClass_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/AnonymousClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mmethodSignature&quot;,mmethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;,eSingleVariableDeclarationToTParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;,mmethodSignatureToTMethodSignature);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLinkFirst/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tParameterList_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tParameterList.ID&quot;, csp);&#xD;&#xA;var_tParameterList_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tSignature_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.ID&quot;, csp);&#xD;&#xA;var_tSignature_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tParameterList_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tSignature_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mName&quot;,mName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mNameToTName&quot;,mNameToTName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodSignature/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eType&quot;,eType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eTypeToTArrayClass&quot;,eTypeToTArrayClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tArrayClass&quot;,tArrayClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ArrayTypeToClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsBoolean/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsChar/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsByte/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsShort/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsLong/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsFloat/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypeIsDouble/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tMethodDefinition_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodDefinition.ID&quot;, csp);&#xD;&#xA;var_tMethodDefinition_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tMethodDefinition_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethodSignature&quot;,tMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTMethodSignature&quot;,mSignatureToTMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethod&quot;,tMethod);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodDefinition/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_number_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;number.tokenValue&quot;, csp);&#xD;&#xA;var_number_tokenValue.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tAnnotation_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnnotation.ID&quot;, csp);&#xD;&#xA;var_tAnnotation_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;StringToInt stringToInt = new StringToInt();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(stringToInt);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;stringToInt.setRuleName(&quot;&quot;);&#xD;&#xA;stringToInt.solve(var_number_tokenValue,var_tAnnotation_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;member&quot;,member);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAnnotationType&quot;,tAnnotationType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mAnnotationTypeToTAnnotationType&quot;,mAnnotationTypeToTAnnotationType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mBody&quot;,mBody);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAnnotable&quot;,tAnnotable);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mBodyToTAnnotable&quot;,mBodyToTAnnotable);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mAnnotationType&quot;,mAnnotationType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Annotatio/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;%ENUM%&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;$&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eOuterType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eOuterType.name&quot;, true, csp);&#xD;&#xA;var_eOuterType_name.setValue(eOuterType.getName());&#xD;&#xA;var_eOuterType_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xD;&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xD;&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.ID&quot;, csp);&#xD;&#xA;var_tNestedType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tNestedPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.tName&quot;, csp);&#xD;&#xA;var_tNestedPackage_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tNestedPackage_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedPackage.ID&quot;, csp);&#xD;&#xA;var_tNestedPackage_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xD;&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xD;&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;AddSuffix addSuffix = new AddSuffix();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(addSuffix);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tNestedType_ID);&#xD;&#xA;addSuffix.setRuleName(&quot;&quot;);&#xD;&#xA;addSuffix.solve(var_eOuterType_name,literal1,var_tNestedPackage_tName);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tNestedPackage_ID);&#xD;&#xA;addPrefix.setRuleName(&quot;&quot;);&#xD;&#xA;addPrefix.solve(literal0,var_eNestedType_name,var_tNestedType_tName);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/NestedEnum/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/PrimitiveTypesIsVoid/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eReturnType&quot;,eReturnType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMethodDefinition&quot;,tMethodDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eReturnTypeToTAbstractType&quot;,eReturnTypeToTAbstractType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eMethodDeclarationToTMethodDefinition&quot;,eMethodDeclarationToTMethodDefinition);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ReturnType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPrevEntry&quot;,mPrevEntry);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;,mmethodSignatureToTMethodSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPrevParameter&quot;,tPrevParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;,eSingleVariableDeclarationToTParameter);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameterLink/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mName.mName&quot;, csp);&#xD;&#xA;var_mName_mName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, csp);&#xD;&#xA;var_tName_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tName_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.ID&quot;, csp);&#xD;&#xA;var_tName_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tName_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mName_mName,var_tName_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;modelToPg&quot;,modelToPg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodName/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/LinkSignatureToType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignatureToTParameterList&quot;,mMethodSignatureToTParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tParameterList&quot;,tParameterList);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodSignature&quot;,mMethodSignature);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodParameter/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTDefinition&quot;,mDefinitionToTDefinition);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mField&quot;,mField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varAccess&quot;,varAccess);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varDeclFrag&quot;,varDeclFrag);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varDeclFragToTField&quot;,varDeclFragToTField);&#xD;&#xA;isApplicableMatch.registerObject(&quot;varAccessToTAccess&quot;,varAccessToTAccess);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/FieldAccessTarget/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;%ENUM%&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xD;&#xA;var_mType_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xD;&#xA;var_tType_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tType_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.ID&quot;, csp);&#xD;&#xA;var_tType_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xD;&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xD;&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tType_ID);&#xD;&#xA;addPrefix.setRuleName(&quot;&quot;);&#xD;&#xA;addPrefix.solve(literal0,var_mType_name,var_tType_tName);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Enum/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/MethodInvocationSource/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperMethodInvocationSource/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/ConstructorInvocationSource/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/SuperConstructorInvocationSource/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.ID&quot;, csp);&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tClass_ID);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/TypeParameter/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tName_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.ID&quot;, csp);&#xD;&#xA;var_tName_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tSig_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSig.ID&quot;, csp);&#xD;&#xA;var_tSig_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_tConstructorDef_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tConstructorDef.ID&quot;, csp);&#xD;&#xA;var_tConstructorDef_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eConstructorDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eConstructorDeclaration.name&quot;, csp);&#xD;&#xA;var_eConstructorDeclaration_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, csp);&#xD;&#xA;var_tName_tName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;CreateID createID_0 = new CreateID();&#xD;&#xA;CreateID createID_1 = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(createID_0);&#xD;&#xA;csp.getConstraints().add(createID_1);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tName_ID);&#xD;&#xA;createID_0.setRuleName(&quot;&quot;);&#xD;&#xA;createID_0.solve(var_tSig_ID);&#xD;&#xA;createID_1.setRuleName(&quot;&quot;);&#xD;&#xA;createID_1.solve(var_tConstructorDef_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eConstructorDeclaration_name,var_tName_tName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/Constructor/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_tClass_ID = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.ID&quot;, csp);&#xD;&#xA;var_tClass_ID.setType(&quot;int&quot;);&#xD;&#xA;Variable var_eAnonymousClassDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eAnonymousClassDeclaration.name&quot;, csp);&#xD;&#xA;var_eAnonymousClassDeclaration_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, csp);&#xD;&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_eAnonymousClassDeclaration_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eAnonymousClassDeclaration.proxy&quot;, csp);&#xD;&#xA;var_eAnonymousClassDeclaration_proxy.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tLib&quot;, csp);&#xD;&#xA;var_tClass_tLib.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;CreateID createID = new CreateID();&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(createID);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;createID.setRuleName(&quot;&quot;);&#xD;&#xA;createID.solve(var_tClass_ID);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eAnonymousClassDeclaration_name,var_tClass_tName);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eAnonymousClassDeclaration_proxy,var_tClass_tLib);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco/model/Modisco.ecore#//Rules/UnresolvedTypeDeclaration/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
</sdmUtil:CompilerInjection>
